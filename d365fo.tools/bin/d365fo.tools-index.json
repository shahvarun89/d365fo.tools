[
    {
        "CommandName":  "Add-D365AzureStorageConfig",
        "Description":  "Adds an Azure Storage Account config to the configuration store",
        "Params":  [
                       [
                           "Name",
                           "The logical name of the Azure Storage Account you are about to registered in the configuration store",
                           "",
                           true,
                           "false",
                           ""
                       ],
                       [
                           "AccountId",
                           "The account id for the Azure Storage Account you want to register in the configuration store",
                           "",
                           true,
                           "false",
                           ""
                       ],
                       [
                           "AccessToken",
                           "The access token for the Azure Storage Account you want to register in the configuration store",
                           "",
                           true,
                           "false",
                           ""
                       ],
                       [
                           "Blobname",
                           "The name of the blob inside the Azure Storage Account you want to register in the configuration store",
                           "Blob",
                           true,
                           "false",
                           ""
                       ],
                       [
                           "ConfigStorageLocation",
                           "Parameter used to instruct where to store the configuration objects\nThe default value is \"User\" and this will store all configuration for the active user\nValid options are:\r\n\"User\"\r\n\"System\"\n\"System\" will store the configuration so all users can access the configuration objects",
                           "",
                           false,
                           "false",
                           "User"
                       ],
                       [
                           "Force",
                           "Switch to instruct the cmdlet to overwrite already registered Azure Storage Account entry",
                           "",
                           false,
                           "false",
                           "False"
                       ]
                   ],
        "Alias":  "",
        "Author":  "Mötz Jensen (@Splaxi)",
        "Synopsis":  "Save an Azure Storage Account config",
        "Name":  "Add-D365AzureStorageConfig",
        "Links":  null,
        "Examples":  "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\\u003eAdd-D365AzureStorageConfig -Name \"UAT-Exports\" -AccountId \"1234\" -AccessToken \"dafdfasdfasdf\" -Blob \"testblob\"\nThis will add an entry into the list of Azure Storage Accounts that is stored with the name \"UAT-Exports\" with AccountId \"1234\", AccessToken \"dafdfasdfasdf\" and Blob \"testblob\".\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\\u003eAdd-D365AzureStorageConfig -Name \"UAT-Exports\" -AccountId \"1234\" -AccessToken \"dafdfasdfasdf\" -Blob \"testblob\" -ConfigStorageLocation \"System\"\nThis will add an entry into the list of Azure Storage Accounts that is stored with the name \"UAT-Exports\" with AccountId \"1234\", AccessToken \"dafdfasdfasdf\" and Blob \"testblob\".\r\nAll configuration objects will be persisted in the system wide configuration store.\r\nThis will enable all users to access the configuration objects and their values.",
        "Syntax":  "Add-D365AzureStorageConfig [-Name] \u003cString\u003e [-AccountId] \u003cString\u003e [-AccessToken] \u003cString\u003e [-Blobname] \u003cString\u003e [[-ConfigStorageLocation] \u003cString\u003e] [-Force] [\u003cCommonParameters\u003e]"
    },
    {
        "CommandName":  "Add-D365EnvironmentConfig",
        "Description":  "Adds an environment config to the configuration store",
        "Params":  [
                       [
                           "Name",
                           "The logical name of the environment you are about to registered in the configuration",
                           "",
                           true,
                           "false",
                           ""
                       ],
                       [
                           "URL",
                           "The URL to the environment you want the module to use when possible",
                           "",
                           true,
                           "false",
                           ""
                       ],
                       [
                           "SqlUser",
                           "The login name for the SQL Server instance",
                           "",
                           false,
                           "false",
                           "sqladmin"
                       ],
                       [
                           "SqlPwd",
                           "The password for the SQL Server user",
                           "",
                           false,
                           "false",
                           ""
                       ],
                       [
                           "Company",
                           "The company you want to work against when calling any browser based cmdlets\nThe default value is \"DAT\"",
                           "",
                           false,
                           "false",
                           "DAT"
                       ],
                       [
                           "TfsUri",
                           "The URI for the TFS / VSTS account that you are working against.",
                           "",
                           false,
                           "false",
                           ""
                       ],
                       [
                           "ConfigStorageLocation",
                           "Parameter used to instruct where to store the configuration objects\nThe default value is \"User\" and this will store all configuration for the active user\nValid options are:\r\n\"User\"\r\n\"System\"\n\"System\" will store the configuration so all users can access the configuration objects",
                           "",
                           false,
                           "false",
                           "User"
                       ],
                       [
                           "Force",
                           "Switch to instruct the cmdlet to overwrite already registered environment entry",
                           "",
                           false,
                           "false",
                           "False"
                       ]
                   ],
        "Alias":  "",
        "Synopsis":  "Save an environment config",
        "Name":  "Add-D365EnvironmentConfig",
        "Links":  null,
        "Examples":  "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\\u003eAdd-D365EnvironmentConfig -Name \"Customer-UAT\" -URL \"https://usnconeboxax1aos.cloud.onebox.dynamics.com/?cmp=USMF\" -Company \"DAT\"\nThis will add an entry into the list of environments that is stored with the name \"Customer-UAT\" and with the URL \"https://usnconeboxax1aos.cloud.onebox.dynamics.com/?cmp=USMF\".\r\nThe company is registered \"DAT\".\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\\u003eAdd-D365EnvironmentConfig -Name \"Customer-UAT\" -URL \"https://usnconeboxax1aos.cloud.onebox.dynamics.com/?cmp=USMF\" -Company \"DAT\" -SqlUser \"SqlAdmin\" -SqlPwd \"Pass@word1\"\nThis will add an entry into the list of environments that is stored with the name \"Customer-UAT\" and with the URL \"https://usnconeboxax1aos.cloud.onebox.dynamics.com/?cmp=USMF\".\r\nIt will register the SqlUser as \"SqlAdmin\" and the SqlPassword to \"Pass@word1\".\nThis it useful for working on Tier 2 environments where the SqlUser and SqlPassword cannot be extracted from the environment itself.",
        "Syntax":  "Add-D365EnvironmentConfig [-Name] \u003cString\u003e [-URL] \u003cString\u003e [[-SqlUser] \u003cString\u003e] [[-SqlPwd] \u003cString\u003e] [[-Company] \u003cString\u003e] [[-TfsUri] \u003cString\u003e] [[-ConfigStorageLocation] \u003cString\u003e] [-Force] [\u003cCommonParameters\u003e]"
    },
    {
        "CommandName":  "Backup-D365MetaDataDir",
        "Description":  "Creates a backup of all the files and folders from the Metadata directory",
        "Params":  [
                       [
                           "MetaDataDir",
                           "Path to the Metadata directory\nDefault value is the PackagesLocalDirectory",
                           "",
                           false,
                           "false",
                           "\"$Script:MetaDataDir\""
                       ],
                       [
                           "BackupDir",
                           "Path where you want the backup to be place",
                           "",
                           false,
                           "false",
                           "\"$($Script:MetaDataDir)_backup\""
                       ]
                   ],
        "Alias":  "",
        "Author":  "Mötz Jensen (@Splaxi)",
        "Synopsis":  "Create a backup of the Metadata directory",
        "Name":  "Backup-D365MetaDataDir",
        "Links":  null,
        "Examples":  "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\\u003eBackup-D365MetaDataDir\nThis will backup the PackagesLocalDirectory and create an PackagesLocalDirectory_backup next to it",
        "Syntax":  "Backup-D365MetaDataDir [[-MetaDataDir] \u003cString\u003e] [[-BackupDir] \u003cString\u003e] [\u003cCommonParameters\u003e]"
    },
    {
        "CommandName":  "Clear-D365MonitorData",
        "Description":  "Clear the monitoring data that is filling up the service drive on a Dynamics 365 for Finance \u0026 Operations",
        "Params":  [
                       [
                           "Path",
                           "The path to where the monitoring data is located\nThe default value is the \"ServiceDrive\" (j:\\ | k:\\) and the \\MonAgentData\\SingleAgent\\Tables folder structure",
                           "",
                           false,
                           "true (ByValue, ByPropertyName)",
                           "(Join-Path ([System.Environment]::ExpandEnvironmentVariables(\"%ServiceDrive%\")) \"\\MonAgentData\\SingleAgent\\Tables\")"
                       ]
                   ],
        "Alias":  "",
        "Author":  "Mötz Jensen (@Splaxi)",
        "Synopsis":  "Clear the monitoring data from a Dynamics 365 for Finance \u0026 Operations machine",
        "Name":  "Clear-D365MonitorData",
        "Links":  null,
        "Examples":  "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\\u003eClear-D365MonitorData\nThis will delete all the files that are located in the default path on the machine.\r\nSome files might be locked by a process, but the cmdlet will attemp to delete all files.",
        "Syntax":  "Clear-D365MonitorData [[-Path] \u003cString\u003e] [\u003cCommonParameters\u003e]"
    },
    {
        "CommandName":  "Disable-D365MaintenanceMode",
        "Description":  "Sets the Dynamics 365 environment back into operating / running state after been in maintenance mode",
        "Params":  [
                       [
                           "MetaDataDir",
                           "The path to the meta data directory for the environment\nDefault path is the same as the aos service PackagesLocalDirectory",
                           "",
                           false,
                           "false",
                           "\"$Script:MetaDataDir\""
                       ],
                       [
                           "BinDir",
                           "The path to the bin directory for the environment\nDefault path is the same as the aos service PackagesLocalDirectory\\bin",
                           "",
                           false,
                           "false",
                           "\"$Script:BinDir\""
                       ],
                       [
                           "DatabaseServer",
                           "The name of the database server\nIf on-premises or classic SQL Server, use either short name og Fully Qualified Domain Name (FQDN).\nIf Azure use the full address to the database server, e.g. server.database.windows.net",
                           "",
                           false,
                           "false",
                           "$Script:DatabaseServer"
                       ],
                       [
                           "DatabaseName",
                           "The name of the database",
                           "",
                           false,
                           "false",
                           "$Script:DatabaseName"
                       ],
                       [
                           "SqlUser",
                           "The login name for the SQL Server instance",
                           "",
                           false,
                           "false",
                           "$Script:DatabaseUserName"
                       ],
                       [
                           "SqlPwd",
                           "The password for the SQL Server user.",
                           "",
                           false,
                           "false",
                           "$Script:DatabaseUserPassword"
                       ]
                   ],
        "Alias":  "",
        "Author":  "Mötz Jensen (@splaxi)",
        "Synopsis":  "Sets the environment back into operating state",
        "Name":  "Disable-D365MaintenanceMode",
        "Links":  null,
        "Examples":  "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\\u003eDisable-D365MaintenanceMode\nThis will execute the Microsoft.Dynamics.AX.Deployment.Setup.exe with the default values that was pulled from the environment and put the environment into the operate / running state.",
        "Syntax":  "Disable-D365MaintenanceMode [[-MetaDataDir] \u003cString\u003e] [[-BinDir] \u003cString\u003e] [[-DatabaseServer] \u003cString\u003e] [[-DatabaseName] \u003cString\u003e] [[-SqlUser] \u003cString\u003e] [[-SqlPwd] \u003cString\u003e] [\u003cCommonParameters\u003e]"
    },
    {
        "CommandName":  "Disable-D365User",
        "Description":  "Sets the enabled to 0 in the userinfo table.",
        "Params":  [
                       [
                           "DatabaseServer",
                           "The name of the database server\nIf on-premises or classic SQL Server, use either short name og Fully Qualified Domain Name (FQDN).\nIf Azure use the full address to the database server, e.g. server.database.windows.net",
                           "",
                           false,
                           "false",
                           "$Script:DatabaseServer"
                       ],
                       [
                           "DatabaseName",
                           "The name of the database",
                           "",
                           false,
                           "false",
                           "$Script:DatabaseName"
                       ],
                       [
                           "SqlUser",
                           "The login name for the SQL Server instance",
                           "",
                           false,
                           "false",
                           "$Script:DatabaseUserName"
                       ],
                       [
                           "SqlPwd",
                           "The password for the SQL Server user.",
                           "",
                           false,
                           "false",
                           "$Script:DatabaseUserPassword"
                       ],
                       [
                           "Email",
                           "The search string to select which user(s) should be disabled.\nThe parameter supports wildcards. E.g. -Email \"*@contoso.com*\"",
                           "",
                           false,
                           "false",
                           ""
                       ]
                   ],
        "Alias":  "",
        "Author":  "Mötz Jensen (@Splaxi)",
        "Synopsis":  "Disables the user in D365FO",
        "Name":  "Disable-D365User",
        "Links":  null,
        "Examples":  "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\\u003eDisable-D365User\nThis will Disable all users for the environment\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\\u003eDisable-D365User -Email \"claire@contoso.com\"\nThis will Disable the user with the email address \"claire@contoso.com\"\n-------------------------- EXAMPLE 3 --------------------------\nPS C:\\\u003eDisable-D365User -Email \"*contoso.com\"\nThis will Disable all users that matches the search \"*contoso.com\" in their email address",
        "Syntax":  "Disable-D365User [[-DatabaseServer] \u003cString\u003e] [[-DatabaseName] \u003cString\u003e] [[-SqlUser] \u003cString\u003e] [[-SqlPwd] \u003cString\u003e] [[-Email] \u003cString\u003e] [\u003cCommonParameters\u003e]"
    },
    {
        "CommandName":  "Enable-D365MaintenanceMode",
        "Description":  "Sets the Dynamics 365 environment into maintenance mode to enable the user to update the license configuration",
        "Params":  [
                       [
                           "MetaDataDir",
                           "The path to the meta data directory for the environment\nDefault path is the same as the aos service PackagesLocalDirectory",
                           "",
                           false,
                           "false",
                           "\"$Script:MetaDataDir\""
                       ],
                       [
                           "BinDir",
                           "The path to the bin directory for the environment\nDefault path is the same as the aos service PackagesLocalDirectory\\bin",
                           "",
                           false,
                           "false",
                           "\"$Script:BinDir\""
                       ],
                       [
                           "DatabaseServer",
                           "The name of the database server\nIf on-premises or classic SQL Server, use either short name og Fully Qualified Domain Name (FQDN).\nIf Azure use the full address to the database server, e.g. server.database.windows.net",
                           "",
                           false,
                           "false",
                           "$Script:DatabaseServer"
                       ],
                       [
                           "DatabaseName",
                           "The name of the database",
                           "",
                           false,
                           "false",
                           "$Script:DatabaseName"
                       ],
                       [
                           "SqlUser",
                           "The login name for the SQL Server instance",
                           "",
                           false,
                           "false",
                           "$Script:DatabaseUserName"
                       ],
                       [
                           "SqlPwd",
                           "The password for the SQL Server user.",
                           "",
                           false,
                           "false",
                           "$Script:DatabaseUserPassword"
                       ]
                   ],
        "Alias":  "",
        "Author":  "Mötz Jensen (@splaxi)",
        "Synopsis":  "Sets the environment into maintenance mode",
        "Name":  "Enable-D365MaintenanceMode",
        "Links":  null,
        "Examples":  "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\\u003eEnable-D365MaintenanceMode\nThis will execute the Microsoft.Dynamics.AX.Deployment.Setup.exe with the default values that was pulled from the environment and put the environment into the operate / running state",
        "Syntax":  "Enable-D365MaintenanceMode [[-MetaDataDir] \u003cString\u003e] [[-BinDir] \u003cString\u003e] [[-DatabaseServer] \u003cString\u003e] [[-DatabaseName] \u003cString\u003e] [[-SqlUser] \u003cString\u003e] [[-SqlPwd] \u003cString\u003e] [\u003cCommonParameters\u003e]"
    },
    {
        "CommandName":  "Enable-D365User",
        "Description":  "Sets the enabled to 1 in the userinfo table",
        "Params":  [
                       [
                           "DatabaseServer",
                           "The name of the database server\nIf on-premises or classic SQL Server, use either short name og Fully Qualified Domain Name (FQDN)\nIf Azure use the full address to the database server, e.g. server.database.windows.net",
                           "",
                           false,
                           "false",
                           "$Script:DatabaseServer"
                       ],
                       [
                           "DatabaseName",
                           "The name of the database",
                           "",
                           false,
                           "false",
                           "$Script:DatabaseName"
                       ],
                       [
                           "SqlUser",
                           "The login name for the SQL Server instance",
                           "",
                           false,
                           "false",
                           "$Script:DatabaseUserName"
                       ],
                       [
                           "SqlPwd",
                           "The password for the SQL Server user",
                           "",
                           false,
                           "false",
                           "$Script:DatabaseUserPassword"
                       ],
                       [
                           "Email",
                           "The search string to select which user(s) should be enabled\nThe parameter supports wildcards. E.g. -Email \"*@contoso.com*\"\nDefault value is \"*\" to update all users",
                           "",
                           false,
                           "false",
                           "*"
                       ]
                   ],
        "Alias":  "",
        "Author":  "Mötz Jensen",
        "Synopsis":  "Enables the user in D365FO",
        "Name":  "Enable-D365User",
        "Links":  null,
        "Examples":  "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\\u003eEnable-D365User\nThis will enable all users for the environment\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\\u003eEnable-D365User -Email \"claire@contoso.com\"\nThis will enable the user with the email address \"claire@contoso.com\"\n-------------------------- EXAMPLE 3 --------------------------\nPS C:\\\u003eEnable-D365User -Email \"*contoso.com\"\nThis will enable all users that matches the search \"*contoso.com\" in their email address",
        "Syntax":  "Enable-D365User [[-DatabaseServer] \u003cString\u003e] [[-DatabaseName] \u003cString\u003e] [[-SqlUser] \u003cString\u003e] [[-SqlPwd] \u003cString\u003e] [[-Email] \u003cString\u003e] [\u003cCommonParameters\u003e]"
    },
    {
        "CommandName":  "Export-D365SecurityDetails",
        "Description":  "Extracts and partitions the security details from an User Interface Security file into the same structure as AOT security files",
        "Params":  [
                       [
                           "FilePath",
                           "Path to the User Interface Security XML file you want to work against",
                           "Path",
                           true,
                           "false",
                           ""
                       ],
                       [
                           "OutputDirectory",
                           "Path to the folder where the cmdlet will output and structure the details from the file.\r\nThe cmdlet will create a sub folder named like the input file.\nDefault value is: \"C:\\temp\\d365fo.tools\\security-extraction\"",
                           "Output",
                           false,
                           "false",
                           "C:\\temp\\d365fo.tools\\security-extraction"
                       ]
                   ],
        "Alias":  "",
        "Author":  "Mötz Jensen (@splaxi)",
        "Synopsis":  "Extract details from a User Interface Security file",
        "Name":  "Export-D365SecurityDetails",
        "Links":  null,
        "Examples":  "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\\u003eExport-D365SecurityDetails -FilePath C:\\temp\\d365fo.tools\\SecurityDatabaseCustomizations.xml\nThis will grab all the details inside the \"C:\\temp\\d365fo.tools\\SecurityDatabaseCustomizations.xml\" file and extract that into the default path \"C:\\temp\\d365fo.tools\\security-extraction\"",
        "Syntax":  "Export-D365SecurityDetails [-FilePath] \u003cString\u003e [[-OutputDirectory] \u003cString\u003e] [\u003cCommonParameters\u003e]"
    },
    {
        "CommandName":  "Find-D365Command",
        "Description":  "Finds d365fo.tools commands searching through the inline help text, building a consolidated json index and querying it because Get-Help is too slow",
        "Tags":  [
                     "Find",
                     "Help",
                     "Command"
                 ],
        "Params":  [
                       [
                           "Pattern",
                           "Searches help for all commands in d365fo.tools for the specified pattern and displays all results",
                           "",
                           false,
                           "false",
                           ""
                       ],
                       [
                           "Tag",
                           "Finds all commands tagged with this auto-populated tag",
                           "",
                           false,
                           "false",
                           ""
                       ],
                       [
                           "Author",
                           "Finds all commands tagged with this author",
                           "",
                           false,
                           "false",
                           ""
                       ],
                       [
                           "MinimumVersion",
                           "Finds all commands tagged with this auto-populated minimum version",
                           "",
                           false,
                           "false",
                           ""
                       ],
                       [
                           "MaximumVersion",
                           "Finds all commands tagged with this auto-populated maximum version",
                           "",
                           false,
                           "false",
                           ""
                       ],
                       [
                           "Rebuild",
                           "Rebuilds the index",
                           "",
                           false,
                           "false",
                           "False"
                       ],
                       [
                           "EnableException",
                           "By default, when something goes wrong we try to catch it, interpret it and give you a friendly warning message.\r\nThis avoids overwhelming you with \"sea of red\" exceptions, but is inconvenient because it basically disables advanced scripting.\r\nUsing this switch turns this \"nice by default\" feature off and enables you to catch exceptions with your own try/catch.",
                           "Silent",
                           false,
                           "false",
                           "False"
                       ],
                       [
                           "WhatIf",
                           "Displays what would happen if the command is run",
                           "wi",
                           false,
                           "false",
                           ""
                       ],
                       [
                           "Confirm",
                           "Confirms overwrite of index",
                           "cf",
                           false,
                           "false",
                           ""
                       ]
                   ],
        "Alias":  "",
        "Author":  "Simone Bizzotto (@niphold)",
        "Synopsis":  "Finds d365fo.tools commands searching through the inline help text",
        "Name":  "Find-D365Command",
        "Links":  "https://dbatools.io/Find-DbaCommand",
        "Examples":  "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\\u003eFind-D365Command \"snapshot\"\nFor lazy typers: finds all commands searching the entire help for \"snapshot\"\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\\u003eFind-D365Command -Pattern \"snapshot\"\nFor rigorous typers: finds all commands searching the entire help for \"snapshot\"\n-------------------------- EXAMPLE 3 --------------------------\nPS C:\\\u003eFind-D365Command -Tag copy\nFinds all commands tagged with \"copy\"\n-------------------------- EXAMPLE 4 --------------------------\nPS C:\\\u003eFind-D365Command -Tag copy,user\nFinds all commands tagged with BOTH \"copy\" and \"user\"\n-------------------------- EXAMPLE 5 --------------------------\nPS C:\\\u003eFind-D365Command -Author chrissy\nFinds every command whose author contains our beloved \"chrissy\"\n-------------------------- EXAMPLE 6 --------------------------\nPS C:\\\u003eFind-D365Command -Author chrissy -Tag copy\nFinds every command whose author contains our beloved \"chrissy\" and it tagged as \"copy\"\n-------------------------- EXAMPLE 7 --------------------------\nPS C:\\\u003eFind-D365Command -Pattern snapshot -Rebuild\nFinds all commands searching the entire help for \"snapshot\", rebuilding the index (good for developers)",
        "Syntax":  "Find-D365Command [[-Pattern] \u003cString\u003e] [[-Tag] \u003cString[]\u003e] [[-Author] \u003cString\u003e] [[-MinimumVersion] \u003cString\u003e] [[-MaximumVersion] \u003cString\u003e] [-Rebuild] [-EnableException] [-WhatIf] [-Confirm] [\u003cCommonParameters\u003e]"
    },
    {
        "CommandName":  "Get-D365ActiveAzureStorageConfig",
        "Description":  "Get active Azure Storage Account configuration object from the configuration store",
        "Params":  [

                   ],
        "Alias":  "",
        "Author":  "Mötz Jensen (@Splaxi)",
        "Synopsis":  "Get active Azure Storage Account configuration",
        "Name":  "Get-D365ActiveAzureStorageConfig",
        "Links":  null,
        "Examples":  "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\\u003eGet-D365ActiveAzureStorageConfig\nThis will get the active Azure Storage configuration",
        "Syntax":  "Get-D365ActiveAzureStorageConfig [\u003cCommonParameters\u003e]"
    },
    {
        "CommandName":  "Get-D365ActiveEnvironmentConfig",
        "Description":  "Get active environment configuration object from the configuration store",
        "Params":  [

                   ],
        "Alias":  "",
        "Author":  "Mötz Jensen (@Splaxi)",
        "Synopsis":  "Get active environment configuration",
        "Name":  "Get-D365ActiveEnvironmentConfig",
        "Links":  null,
        "Examples":  "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\\u003eGet-D365ActiveEnvironmentConfig\nThis will get the active environment configuration",
        "Syntax":  "Get-D365ActiveEnvironmentConfig [\u003cCommonParameters\u003e]"
    },
    {
        "CommandName":  "Get-D365AOTObject",
        "Description":  "Enables you to search for different AOT objects",
        "Params":  [
                       [
                           "Path",
                           "Path to the package that you want to work against",
                           "PackageDirectory",
                           true,
                           "true (ByPropertyName)",
                           ""
                       ],
                       [
                           "ObjectType",
                           "The type of AOT object you\u0027re searching for",
                           "Type",
                           false,
                           "false",
                           "@(\"AxClass\")"
                       ],
                       [
                           "Name",
                           "Name of the object that you\u0027re looking for\nAccepts wildcards for searching. E.g. -Name \"Work*status\"\nDefault value is \"*\" which will search for all objects",
                           "",
                           false,
                           "false",
                           "*"
                       ],
                       [
                           "SearchInPackages",
                           "Switch to instruct the cmdlet to search in packages directly instead\r\nof searching in the XppMetaData directory under a given package",
                           "",
                           false,
                           "false",
                           "False"
                       ],
                       [
                           "IncludePath",
                           "Switch to instruct the cmdlet to include the path for the object found",
                           "",
                           false,
                           "false",
                           "False"
                       ]
                   ],
        "Alias":  "",
        "Author":  "Mötz Jensen (@Splaxi)",
        "Synopsis":  "Search for AOT object",
        "Name":  "Get-D365AOTObject",
        "Links":  null,
        "Examples":  "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\\u003eGet-D365AOTObject -Name *flush* -ObjectType AxClass -Path \"C:\\AOSService\\PackagesLocalDirectory\\ApplicationFoundation\"\nThis will search inside the ApplicationFoundation package for all AxClasses that matches the search *flush*.\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\\u003eGet-D365AOTObject -Name *flush* -ObjectType AxClass -IncludePath -Path \"C:\\AOSService\\PackagesLocalDirectory\\ApplicationFoundation\"\nThis will search inside the ApplicationFoundation package for all AxClasses that matches the search *flush* and include the full path to the files.\n-------------------------- EXAMPLE 3 --------------------------\nPS C:\\\u003eGet-D365InstalledPackage -Name Application* | Get-D365AOTObject -Name *flush* -ObjectType AxClass\nThis searches for all packages that matches Application* and pipes them into Get-D365AOTObject which will search for all AxClasses that matches the search *flush*.\n-------------------------- EXAMPLE 4 --------------------------\nPS C:\\\u003eThis is an advanced example and shouldn\u0027t be something you resolve to every time.\nPS C:\\\u003e Get-D365AOTObject -Path \"C:\\AOSService\\PackagesLocalDirectory\\*\" -Name *flush* -ObjectType AxClass -SearchInPackages\nThis will search across all packages and will look for the all AxClasses that matches the search *flush*.\r\nIt will NOT search in the XppMetaData directory for each package.\nThis can stress your system.",
        "Syntax":  "Get-D365AOTObject [-Path] \u003cString\u003e [[-ObjectType] \u003cString[]\u003e] [[-Name] \u003cString\u003e] [[-SearchInPackages]] [[-IncludePath]] [\u003cCommonParameters\u003e]"
    },
    {
        "CommandName":  "Get-D365AzureStorageConfig",
        "Description":  "Get all Azure Storage Account configuration objects from the configuration store",
        "Params":  [
                       [
                           "Name",
                           "The name of the Azure Storage Account you are looking for\nDefault value is \"*\" to display all Azure Storage Account configs",
                           "",
                           false,
                           "false",
                           "*"
                       ]
                   ],
        "Alias":  "",
        "Author":  "Mötz Jensen (@Splaxi)",
        "Synopsis":  "Get Azure Storage Account configs",
        "Name":  "Get-D365AzureStorageConfig",
        "Links":  null,
        "Examples":  "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\\u003eGet-D365AzureStorageConfig\nThis will show all Azure Storage Account configs",
        "Syntax":  "Get-D365AzureStorageConfig [[-Name] \u003cString\u003e] [\u003cCommonParameters\u003e]"
    },
    {
        "CommandName":  "Get-D365AzureStorageFile",
        "Description":  "Get all files from an Azure Storage Account",
        "Params":  [
                       [
                           "AccountId",
                           "Storage Account Name / Storage Account Id where you want to look for files",
                           "",
                           false,
                           "false",
                           "$Script:AccountId"
                       ],
                       [
                           "AccessToken",
                           "The token that has the needed permissions for the search action",
                           "",
                           false,
                           "false",
                           "$Script:AccessToken"
                       ],
                       [
                           "Blobname",
                           "Name of the container / blog inside the storage account you want to look for files",
                           "",
                           false,
                           "false",
                           "$Script:Blobname"
                       ],
                       [
                           "Name",
                           "Name of the file you are looking for\nAccepts wildcards for searching. E.g. -Name \"Application*Adaptor\"\nDefault value is \"*\" which will search for all packages",
                           "",
                           false,
                           "false",
                           "*"
                       ],
                       [
                           "GetLatest",
                           "Switch to instruct the cmdlet to only fetch the latest file from the Azure Storage Account",
                           "",
                           false,
                           "false",
                           "False"
                       ]
                   ],
        "Alias":  "",
        "Synopsis":  "Get a file from Azure",
        "Name":  "Get-D365AzureStorageFile",
        "Links":  null,
        "Examples":  "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\\u003eGet-D365AzureStorageFile -AccountId \"miscfiles\" -AccessToken \"xx508xx63817x752xx74004x30705xx92x58349x5x78f5xx34xxxxx51\" -Blobname \"backupfiles\"\nWill get all files in the blob / container\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\\u003eGet-D365AzureStorageFile -AccountId \"miscfiles\" -AccessToken \"xx508xx63817x752xx74004x30705xx92x58349x5x78f5xx34xxxxx51\" -Blobname \"backupfiles\" -Name \"*UAT*\"\nWill get all files in the blob / container that fits the \"*UAT*\" search value",
        "Syntax":  "Get-D365AzureStorageFile [[-AccountId] \u003cString\u003e] [[-AccessToken] \u003cString\u003e] [[-Blobname] \u003cString\u003e] [[-Name] \u003cString\u003e] [-GetLatest] [\u003cCommonParameters\u003e]"
    },
    {
        "CommandName":  "Get-D365ClickOnceTrustPrompt",
        "Description":  "Creates the needed registry keys and values for ClickOnce to work on the machine",
        "Params":  [

                   ],
        "Alias":  "",
        "Synopsis":  "Get the ClickOnce configuration",
        "Name":  "Get-D365ClickOnceTrustPrompt",
        "Links":  null,
        "Examples":  "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\\u003eGet-D365ClickOnceTrustPrompt\nThis will get the current ClickOnce configuration",
        "Syntax":  "Get-D365ClickOnceTrustPrompt [\u003cCommonParameters\u003e]"
    },
    {
        "CommandName":  "Get-D365DatabaseAccess",
        "Description":  "Gets all database information from the D365 environment",
        "Params":  [

                   ],
        "Alias":  "",
        "Author":  "Rasmus Andersen (@ITRasmus)",
        "Synopsis":  "Shows the Database Access information for the D365 Environment",
        "Name":  "Get-D365DatabaseAccess",
        "Links":  null,
        "Examples":  "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\\u003eGet-D365DatabaseAccess\nThis will get all relevant details, including connection details, for the database configured for the environment",
        "Syntax":  "Get-D365DatabaseAccess [\u003cCommonParameters\u003e]"
    },
    {
        "CommandName":  "Get-D365DecryptedConfigFile",
        "Description":  "Function used for decrypting the config file used by the D365 Finance \u0026 Operations AOS service",
        "Params":  [
                       [
                           "DropPath",
                           "Place where the decrypted files should be placed",
                           "ExtractFolder",
                           false,
                           "false",
                           "C:\\temp\\d365fo.tools\\ConfigFile_Decrypted"
                       ],
                       [
                           "AosServiceWebRootPath",
                           "Location of the D365 webroot folder",
                           "",
                           false,
                           "false",
                           "$Script:AOSPath"
                       ]
                   ],
        "Alias":  "",
        "Synopsis":  "Decrypts the AOS config file",
        "Name":  "Get-D365DecryptedConfigFile",
        "Links":  null,
        "Examples":  "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\\u003eGet-D365DecryptedConfigFile -DropPath \"c:\\temp\\d365fo.tools\"\nThis will get the config file from the instance, decrypt it and save it to \"c:\\temp\\d365fo.tools\"",
        "Syntax":  "Get-D365DecryptedConfigFile [[-DropPath] \u003cString\u003e] [[-AosServiceWebRootPath] \u003cString\u003e] [\u003cCommonParameters\u003e]"
    },
    {
        "CommandName":  "Get-D365DotNetClass",
        "Description":  "Get a .NET class from an assembly file (dll) from the package directory",
        "Params":  [
                       [
                           "Name",
                           "Name of the .NET class that you are looking for\nAccepts wildcards for searching. E.g. -Name \"ER*Excel*\"\nDefault value is \"*\" which will search for all classes",
                           "",
                           false,
                           "false",
                           "*"
                       ],
                       [
                           "Assembly",
                           "Name of the assembly file that you want to search for the .NET class\nAccepts wildcards for searching. E.g. -Name \"*AX*Framework*.dll\"\nDefault value is \"*.dll\" which will search for assembly files",
                           "",
                           false,
                           "false",
                           "*.dll"
                       ],
                       [
                           "PackageDirectory",
                           "Path to the directory containing the installed packages\nNormally it is located under the AOSService directory in \"PackagesLocalDirectory\"\nDefault value is fetched from the current configuration on the machine",
                           "",
                           false,
                           "false",
                           "$Script:PackageDirectory"
                       ]
                   ],
        "Alias":  "",
        "Synopsis":  "Get a .NET class from the Dynamics 365 for Finance and Operations installation",
        "Name":  "Get-D365DotNetClass",
        "Links":  null,
        "Examples":  "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\\u003eGet-D365DotNetClass -Name \"ERText*\"\nWill search across all assembly files (*.dll) that are located in the default package directory after\r\nany class that fits the search \"ERText*\"\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\\u003eGet-D365DotNetClass -Name \"ERText*\" -Assembly \"*LocalizationFrameworkForAx.dll*\"\nWill search across all assembly files (*.dll) that are fits the search \"*LocalizationFrameworkForAx.dll*\",\r\nthat are located in the default package directory, after any class that fits the search \"ERText*\"\n-------------------------- EXAMPLE 3 --------------------------\nPS C:\\\u003eGet-D365DotNetClass -Name \"ERText*\" | Export-Csv -Path c:\\temp\\results.txt -Delimiter \";\"\nWill search across all assembly files (*.dll) that are located in the default package directory after\r\nany class that fits the search \"ERText*\"\nThe output is saved to a file to make it easier to search inside the result set",
        "Syntax":  "Get-D365DotNetClass [[-Name] \u003cString\u003e] [[-Assembly] \u003cString\u003e] [[-PackageDirectory] \u003cString\u003e] [\u003cCommonParameters\u003e]"
    },
    {
        "CommandName":  "Get-D365DotNetMethod",
        "Description":  "Get a .NET method from an assembly file (dll) from the package directory",
        "Params":  [
                       [
                           "Assembly",
                           "Name of the assembly file that you want to search for the .NET method\nProvide the full path for the assembly file you want to work against",
                           "File",
                           true,
                           "true (ByPropertyName)",
                           ""
                       ],
                       [
                           "Name",
                           "Name of the .NET method that you are looking for\nAccepts wildcards for searching. E.g. -Name \"parmER*Excel*\"\nDefault value is \"*\" which will search for all methods",
                           "MethodName",
                           false,
                           "false",
                           "*"
                       ],
                       [
                           "TypeName",
                           "Name of the .NET class that you want to work against\nAccepts wildcards for searching. E.g. -Name \"*ER*Excel*\"\nDefault value is \"*\" which will work against all classes",
                           "ClassName",
                           false,
                           "false",
                           "*"
                       ]
                   ],
        "Alias":  "",
        "Synopsis":  "Get a .NET method from the Dynamics 365 for Finance and Operations installation",
        "Name":  "Get-D365DotNetMethod",
        "Links":  null,
        "Examples":  "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\\u003eGet-D365DotNetMethod -Assembly \"C:\\AOSService\\PackagesLocalDirectory\\ElectronicReporting\\bin\\Microsoft.Dynamics365.LocalizationFrameworkForAx.dll\"\nWill get all methods, across all classes, from the assembly file\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\\u003eGet-D365DotNetMethod -Assembly \"C:\\AOSService\\PackagesLocalDirectory\\ElectronicReporting\\bin\\Microsoft.Dynamics365.LocalizationFrameworkForAx.dll\" -TypeName \"ERTextFormatExcelFileComponent\"\nWill get all methods, from the \"ERTextFormatExcelFileComponent\" class, from the assembly file\n-------------------------- EXAMPLE 3 --------------------------\nPS C:\\\u003eGet-D365DotNetMethod -Assembly \"C:\\AOSService\\PackagesLocalDirectory\\ElectronicReporting\\bin\\Microsoft.Dynamics365.LocalizationFrameworkForAx.dll\" -TypeName \"ERTextFormatExcelFileComponent\" -Na\r\nme \"*parm*\"\nWill get all methods that fits the search \"*parm*\", from the \"ERTextFormatExcelFileComponent\" class, from the assembly file\n-------------------------- EXAMPLE 4 --------------------------\nPS C:\\\u003eGet-D365DotNetClass -Name \"ERTextFormatExcelFileComponent\" -Assembly \"*LocalizationFrameworkForAx.dll*\" | Get-D365DotNetMethod\nWill get all methods, from the \"ERTextFormatExcelFileComponent\" class, from any assembly file that fits the search \"*LocalizationFrameworkForAx.dll*\"",
        "Syntax":  "Get-D365DotNetMethod [-Assembly] \u003cString\u003e [[-Name] \u003cString\u003e] [[-TypeName] \u003cString\u003e] [\u003cCommonParameters\u003e]"
    },
    {
        "CommandName":  "Get-D365Environment",
        "Description":  "List status for all relevant services that is running in a D365FO environment",
        "Params":  [
                       [
                           "ComputerName",
                           "An array of computers that you want to query for the services status on.",
                           "",
                           false,
                           "false",
                           "@($env:computername)"
                       ],
                       [
                           "All",
                           "Set when you want to query all relevant services\nIncludes:\r\nAos\r\nBatch\r\nFinancial Reporter\r\nDMF",
                           "",
                           false,
                           "false",
                           "[switch]::Present"
                       ],
                       [
                           "Aos",
                           "Switch to instruct the cmdlet to query the AOS (IIS) service",
                           "",
                           false,
                           "false",
                           "False"
                       ],
                       [
                           "Batch",
                           "Switch to instruct the cmdlet query the batch service",
                           "",
                           false,
                           "false",
                           "False"
                       ],
                       [
                           "FinancialReporter",
                           "Switch to instruct the cmdlet query the financial reporter (Management Reporter 2012)",
                           "",
                           false,
                           "false",
                           "False"
                       ],
                       [
                           "DMF",
                           "Switch to instruct the cmdlet query the DMF service",
                           "",
                           false,
                           "false",
                           "False"
                       ]
                   ],
        "Alias":  "",
        "Author":  "Mötz Jensen (@Splaxi)",
        "Synopsis":  "Cmdlet to get the current status for the different services in a Dynamics 365 Finance \u0026 Operations environment",
        "Name":  "Get-D365Environment",
        "Links":  null,
        "Examples":  "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\\u003eGet-D365Environment -All\nWill query all D365FO service on the machine\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\\u003eGet-D365Environment -ComputerName \"TEST-SB-AOS1\",\"TEST-SB-AOS2\",\"TEST-SB-BI1\" -All\nWill query all D365FO service on the different machines\n-------------------------- EXAMPLE 3 --------------------------\nPS C:\\\u003eGet-D365Environment -Aos -Batch\nWill query the Aos \u0026 Batch services on the machine",
        "Syntax":  "Get-D365Environment [[-ComputerName] \u003cString[]\u003e] [[-All]] [\u003cCommonParameters\u003e]\nGet-D365Environment [[-ComputerName] \u003cString[]\u003e] [[-Aos]] [[-Batch]] [[-FinancialReporter]] [[-DMF]] [\u003cCommonParameters\u003e]"
    },
    {
        "CommandName":  "Get-D365EnvironmentConfig",
        "Description":  "Get all environment configuration objects from the configuration store",
        "Params":  [
                       [
                           "Name",
                           "The name of the environment you are looking for\nDefault value is \"*\" to display all environment configs",
                           "",
                           false,
                           "false",
                           "*"
                       ]
                   ],
        "Alias":  "",
        "Synopsis":  "Get environment configs",
        "Name":  "Get-D365EnvironmentConfig",
        "Links":  null,
        "Examples":  "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\\u003eGet-D365EnvironmentConfig\nThis will show all environment configs",
        "Syntax":  "Get-D365EnvironmentConfig [[-Name] \u003cString\u003e] [\u003cCommonParameters\u003e]"
    },
    {
        "CommandName":  "Get-D365EnvironmentSetting",
        "Description":  "Gets all settings the Dynamics 365 for Finance \u0026 Operations environment uses.",
        "Params":  [

                   ],
        "Alias":  "",
        "Author":  "Rasmus Andersen (@ITRasmus)",
        "Synopsis":  "Get the D365FO environment settings",
        "Name":  "Get-D365EnvironmentSetting",
        "Links":  null,
        "Examples":  "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\\u003eGet-D365EnvironmentSetting\nThis will get all details available for the environment\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\\u003eGet-D365EnvironmentSetting | Format-Custom -Property *\nThis will get all details available for the environment and format it to show all details in a long custom object.",
        "Syntax":  "Get-D365EnvironmentSetting [\u003cCommonParameters\u003e]"
    },
    {
        "CommandName":  "Get-D365ExposedService",
        "Description":  "Function for getting which sevices there are exposed from D365",
        "Params":  [
                       [
                           "ClientId",
                           "Client Id from the AppRegistration",
                           "",
                           true,
                           "false",
                           ""
                       ],
                       [
                           "ClientSecret",
                           "Client Secret from the AppRegistration",
                           "",
                           true,
                           "false",
                           ""
                       ],
                       [
                           "D365FO",
                           "Url fro the D365 including Https://",
                           "",
                           false,
                           "false",
                           ""
                       ],
                       [
                           "Authority",
                           "The Authority to issue the token",
                           "",
                           false,
                           "false",
                           ""
                       ]
                   ],
        "Alias":  "",
        "Author":  "Rasmus Andersen (@ITRasmus)",
        "Synopsis":  "Returns Exposed services",
        "Name":  "Get-D365ExposedService",
        "Links":  null,
        "Examples":  "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\\u003eGet-D365ExposedService -ClientId \"MyClientId\" -ClientSecret \"MyClientSecret\"\nThis will show a list of all the services that the D365FO instance is exposing.",
        "Syntax":  "Get-D365ExposedService [-ClientId] \u003cString\u003e [-ClientSecret] \u003cString\u003e [[-D365FO] \u003cString\u003e] [[-Authority] \u003cString\u003e] [\u003cCommonParameters\u003e]"
    },
    {
        "CommandName":  "Get-D365InstalledHotfix",
        "Description":  "Get all relevant details for installed hotfix",
        "Params":  [
                       [
                           "BinDir",
                           "The path to the bin directory for the environment\nDefault path is the same as the AOS Service PackagesLocalDirectory\\bin",
                           "",
                           false,
                           "false",
                           "\"$Script:BinDir\\bin\""
                       ],
                       [
                           "PackageDirectory",
                           "Path to the PackagesLocalDirectory\nDefault path is the same as the AOS Service PackagesLocalDirectory",
                           "",
                           false,
                           "false",
                           "$Script:PackageDirectory"
                       ],
                       [
                           "Model",
                           "Name of the model that you want to work against\nAccepts wildcards for searching. E.g. -Model \"*Retail*\"\nDefault value is \"*\" which will search for all models",
                           "",
                           false,
                           "false",
                           "*"
                       ],
                       [
                           "Name",
                           "Name of the hotfix that you are looking for\nAccepts wildcards for searching. E.g. -Name \"7045*\"\nDefault value is \"*\" which will search for all hotfixes",
                           "",
                           false,
                           "false",
                           "*"
                       ],
                       [
                           "KB",
                           "KB number of the hotfix that you are looking for\nAccepts wildcards for searching. E.g. -KB \"4045*\"\nDefault value is \"*\" which will search for all KB\u0027s",
                           "",
                           false,
                           "false",
                           "*"
                       ]
                   ],
        "Alias":  "",
        "Author":  "Mötz Jensen (@Splaxi)",
        "Synopsis":  "Get installed hotfix",
        "Name":  "Get-D365InstalledHotfix",
        "Links":  null,
        "Examples":  "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\\u003eGet-D365InstalledHotfix\nThis will display all installed hotfixes found on this machine\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\\u003eGet-D365InstalledHotfix -Model \"*retail*\"\nThis will display all installed hotfixes found for all models that matches the search for \"*retail*\" found on this machine\n-------------------------- EXAMPLE 3 --------------------------\nPS C:\\\u003eGet-D365InstalledHotfix -Model \"*retail*\" -KB \"*43*\"\nThis will display all installed hotfixes found for all models that matches the search for \"*retail*\" and only with KB\u0027s that matches the search for \"*43*\" found on this machine",
        "Syntax":  "Get-D365InstalledHotfix [[-BinDir] \u003cString\u003e] [[-PackageDirectory] \u003cString\u003e] [[-Model] \u003cString\u003e] [[-Name] \u003cString\u003e] [[-KB] \u003cString\u003e] [\u003cCommonParameters\u003e]"
    },
    {
        "CommandName":  "Get-D365InstalledPackage",
        "Description":  "Get installed package from the machine running the AOS service for Dynamics 365 Finance \u0026 Operations",
        "Params":  [
                       [
                           "Name",
                           "Name of the package that you are looking for\nAccepts wildcards for searching. E.g. -Name \"Application*Adaptor\"\nDefault value is \"*\" which will search for all packages",
                           "",
                           false,
                           "false",
                           "*"
                       ],
                       [
                           "PackageDirectory",
                           "Path to the directory containing the installed packages\nNormally it is located under the AOSService directory in \"PackagesLocalDirectory\"\nDefault value is fetched from the current configuration on the machine",
                           "",
                           false,
                           "false",
                           "$Script:PackageDirectory"
                       ]
                   ],
        "Alias":  "",
        "Author":  "Mötz Jensen (@Splaxi)",
        "Synopsis":  "Get installed package from Dynamics 365 Finance \u0026 Operations environment",
        "Name":  "Get-D365InstalledPackage",
        "Links":  null,
        "Examples":  "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\\u003eGet-D365InstalledPackage\nShows the entire list of installed packages located in the default location on the machine\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\\u003eGet-D365InstalledPackage -Name \"Application*Adaptor\"\nShows the list of installed packages where the name fits the search \"Application*Adaptor\"\nA result set example:\r\nApplicationFoundationFormAdaptor\r\nApplicationPlatformFormAdaptor\r\nApplicationSuiteFormAdaptor\r\nApplicationWorkspacesFormAdaptor\n-------------------------- EXAMPLE 3 --------------------------\nPS C:\\\u003eGet-D365InstalledPackage -PackageDirectory \"J:\\AOSService\\PackagesLocalDirectory\"\nShows the entire list of installed packages located in \"J:\\AOSService\\PackagesLocalDirectory\" on the machine",
        "Syntax":  "Get-D365InstalledPackage [[-Name] \u003cString\u003e] [[-PackageDirectory] \u003cString\u003e] [\u003cCommonParameters\u003e]"
    },
    {
        "CommandName":  "Get-D365InstalledService",
        "Description":  "Get installed Dynamics 365 for Finance \u0026 Operations services that are installed on the machine",
        "Params":  [
                       [
                           "Path",
                           "Path to the folder that contians the \"InstallationRecords\" folder",
                           "",
                           false,
                           "false",
                           "$Script:InstallationRecordsDir"
                       ]
                   ],
        "Alias":  "",
        "Author":  "Mötz Jensen (@Splaxi)",
        "Synopsis":  "Get installed D365 services",
        "Name":  "Get-D365InstalledService",
        "Links":  null,
        "Examples":  "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\\u003eGet-D365InstalledService\nThis will get all installed services on the machine.",
        "Syntax":  "Get-D365InstalledService [[-Path] \u003cString\u003e] [\u003cCommonParameters\u003e]"
    },
    {
        "CommandName":  "Get-D365InstanceName",
        "Description":  "Get the instance name that is registered in the environment",
        "Params":  [

                   ],
        "Alias":  "",
        "Author":  "Rasmus Andersen (@ITRasmus)",
        "Synopsis":  "Gets the instance name",
        "Name":  "Get-D365InstanceName",
        "Links":  null,
        "Examples":  "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\\u003eGet-D365InstanceName\nThis will get the service name that the environment has configured",
        "Syntax":  "Get-D365InstanceName [\u003cCommonParameters\u003e]"
    },
    {
        "CommandName":  "Get-D365Label",
        "Description":  "Get label details from the resource file",
        "Params":  [
                       [
                           "FilePath",
                           "The path to resource file that you want to get label details from",
                           "Path",
                           true,
                           "true (ByPropertyName)",
                           ""
                       ],
                       [
                           "Name",
                           "Name of the label you are looking for\nAccepts wildcards for searching. E.g. -Name \"@PRO*\"\nDefault value is \"*\" which will search for all labels in the resource file",
                           "",
                           false,
                           "false",
                           "*"
                       ],
                       [
                           "Value",
                           "Value of the label you are looking for\nAccepts wildcards for searching. E.g. -Name \"*Qty*\"\nDefault value is \"*\" which will search for all values in the resource file",
                           "",
                           false,
                           "false",
                           "*"
                       ],
                       [
                           "IncludePath",
                           "Switch to indicate whether you want the result set to include the path to the resource file or not\nDefault is OFF - path details will not be part of the output",
                           "",
                           false,
                           "false",
                           "False"
                       ]
                   ],
        "Alias":  "",
        "Author":  "Mötz Jensen (@Splaxi)",
        "Synopsis":  "Get label from the resource file",
        "Name":  "Get-D365Label",
        "Links":  null,
        "Examples":  "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\\u003eGet-D365Label -Path \"C:\\AOSService\\PackagesLocalDirectory\\ApplicationSuite\\Resources\\en-US\\PRO.resources.dll\"\nWill get all labels from the \"PRO.resouce.dll\" file\nThe language is determined by the path to the resource file and nothing else\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\\u003eGet-D365Label -Path \"C:\\AOSService\\PackagesLocalDirectory\\ApplicationSuite\\Resources\\en-US\\PRO.resources.dll\" -Name \"@PRO505\"\nWill get the label with the name \"@PRO505\" from the \"PRO.resouce.dll\" file\nThe language is determined by the path to the resource file and nothing else\n-------------------------- EXAMPLE 3 --------------------------\nPS C:\\\u003eGet-D365Label -Path \"C:\\AOSService\\PackagesLocalDirectory\\ApplicationSuite\\Resources\\en-US\\PRO.resources.dll\" -Value \"*qty*\"\nWill get all the labels where the value fits the search \"*qty*\" from the \"PRO.resouce.dll\" file\nThe language is determined by the path to the resource file and nothing else\n-------------------------- EXAMPLE 4 --------------------------\nPS C:\\\u003eGet-D365InstalledPackage -Name \"ApplicationSuite\" | Get-D365PackageLabelFile -Language \"da\" | Get-D365Label -value \"*batch*\" -IncludePath\nWill get all the labels, across all label files, for the \"ApplicationSuite\", where the language is \"da\" and where the label value fits the search \"*batch*\".\nThe path to the label file is included in the output.",
        "Syntax":  "Get-D365Label [-FilePath] \u003cString\u003e [[-Name] \u003cString\u003e] [[-Value] \u003cString\u003e] [-IncludePath] [\u003cCommonParameters\u003e]\nGet-D365Label [-FilePath] \u003cString\u003e [[-Name] \u003cString\u003e] [[-Value] \u003cString\u003e] [-IncludePath] [\u003cCommonParameters\u003e]"
    },
    {
        "CommandName":  "Get-D365LogicAppConfig",
        "Description":  "Get the details that are stored for the module when\nit has to invoke the Azure Logic App",
        "Params":  [

                   ],
        "Alias":  "",
        "Author":  "Mötz Jensen (@Splaxi)",
        "Synopsis":  "Get the registered details for Azure Logic App",
        "Name":  "Get-D365LogicAppConfig",
        "Links":  null,
        "Examples":  "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\\u003eGet-D365LogicAppConfig\nThis will fetch the current registered Azure Logic App details on the machine.",
        "Syntax":  "Get-D365LogicAppConfig [\u003cCommonParameters\u003e]"
    },
    {
        "CommandName":  "Get-D365OfflineAuthenticationAdminEmail",
        "Description":  "Get the registered offline administrator from the \"DynamicsDevConfig.xml\" file located in the default Package Directory",
        "Params":  [

                   ],
        "Alias":  "",
        "Synopsis":  "Gets the registered offline administrator e-mail configured",
        "Name":  "Get-D365OfflineAuthenticationAdminEmail",
        "Links":  null,
        "Examples":  "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\\u003eGet-D365OfflineAuthenticationAdminEmail\nWill read the DynamicsDevConfig.xml and display the registered Offline Administrator E-mail address.",
        "Syntax":  "Get-D365OfflineAuthenticationAdminEmail [\u003cCommonParameters\u003e]"
    },
    {
        "CommandName":  "Get-D365PackageBundleDetail",
        "Description":  "Get the details from an axscdppkg file by extracting it like a zip file.\n\nCapable of extracting the manifest details from the inner packages as well",
        "Params":  [
                       [
                           "Path",
                           "Path to the axscdppkg file you want to analyze",
                           "File",
                           true,
                           "false",
                           ""
                       ],
                       [
                           "ExtractionPath",
                           "Path where you want the cmdlet to work with extraction of all the files\nDefault value is: C:\\Users\\Username\\AppData\\Local\\Temp",
                           "",
                           false,
                           "false",
                           "([System.IO.Path]::GetTempPath())"
                       ],
                       [
                           "KB",
                           "KB number of the hotfix that you are looking for\nAccepts wildcards for searching. E.g. -KB \"4045*\"\nDefault value is \"*\" which will search for all KB\u0027s",
                           "",
                           false,
                           "false",
                           "*"
                       ],
                       [
                           "Hotfix",
                           "Package Id / Hotfix number the hotfix that you are looking for\nAccepts wildcards for searching. E.g. -Hotfix \"7045*\"\nDefault value is \"*\" which will search for all hotfixes",
                           "",
                           false,
                           "false",
                           "*"
                       ],
                       [
                           "Traverse",
                           "Switch to instruct the cmdlet to traverse the inner packages and extract their details",
                           "",
                           false,
                           "false",
                           "False"
                       ],
                       [
                           "KeepFiles",
                           "Switch to instruct the cmdlet to keep the files for further manual analyze",
                           "",
                           false,
                           "false",
                           "False"
                       ],
                       [
                           "IncludeRawManifest",
                           "Switch to instruct the cmdlet to include the raw content of the manifest file\nOnly works with the -Traverse option",
                           "",
                           false,
                           "false",
                           "False"
                       ]
                   ],
        "Alias":  "",
        "Author":  "Mötz Jensen (@Splaxi)",
        "Synopsis":  "Get the details from an axscdppkg file",
        "Name":  "Get-D365PackageBundleDetail",
        "Links":  null,
        "Examples":  "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\\u003eGet-D365PackageBundleDetail -Path \"c:\\temp\\HotfixPackageBundle.axscdppkg\" -Traverse\nThis will extract all the content from the \"HotfixPackageBundle.axscdppkg\" file and extract all inner packages. For each inner package it will find the manifest file and fetch the KB numbers. The raw \r\nmanifest file content is included to be analyzed.\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\\u003eGet-D365PackageBundleDetail -Path \"c:\\temp\\HotfixPackageBundle.axscdppkg\" -ExtractionPath C:\\Temp\\20180905 -Traverse -KeepFiles\nThis will extract all the content from the \"HotfixPackageBundle.axscdppkg\" file and extract all inner packages. It will extract the content into C:\\Temp\\20180905 and keep the files after completion.\n-------------------------- EXAMPLE 3 --------------------------\nPS C:\\\u003eAdvanced scenario\nPS C:\\\u003e Get-D365PackageBundleDetail -Path C:\\temp\\HotfixPackageBundle.axscdppkg -Traverse -IncludeRawManifest | ForEach-Object {$_.RawManifest | Out-File \"C:\\temp\\$($_.PackageId).txt\"}\nThis will traverse the \"HotfixPackageBundle.axscdppkg\" file and save the manifest files into c:\\temp. Everything else is omitted and cleaned up.",
        "Syntax":  "Get-D365PackageBundleDetail [-Path] \u003cString\u003e [[-ExtractionPath] \u003cString\u003e] [-KB \u003cString\u003e] [-Hotfix \u003cString\u003e] [-Traverse] [-KeepFiles] [-IncludeRawManifest] [\u003cCommonParameters\u003e]"
    },
    {
        "CommandName":  "Get-D365PackageLabelFile",
        "Description":  "Get label file (resource file) from the package directory",
        "Params":  [
                       [
                           "PackageDirectory",
                           "Path to the package that you want to get a label file from",
                           "Path",
                           true,
                           "true (ByPropertyName)",
                           ""
                       ],
                       [
                           "Name",
                           "Name of the label file you are looking for\nAccepts wildcards for searching. E.g. -Name \"Fixed*Accounting\"\nDefault value is \"*\" which will search for all label files",
                           "",
                           false,
                           "false",
                           "*"
                       ],
                       [
                           "Language",
                           "The language of the label file you are looking for\nAccepts wildcards for searching. E.g. -Language \"en*\"\nDefault value is \"en-US\" which will search for en-US language files",
                           "",
                           false,
                           "false",
                           "en-US"
                       ]
                   ],
        "Alias":  "",
        "Synopsis":  "Get label file from a package",
        "Name":  "Get-D365PackageLabelFile",
        "Links":  null,
        "Examples":  "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\\u003eGet-D365PackageLabelFile -PackageDirectory \"C:\\AOSService\\PackagesLocalDirectory\\ApplicationSuite\"\nShows all the label files for ApplicationSuite package\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\\u003eGet-D365PackageLabelFile -PackageDirectory \"C:\\AOSService\\PackagesLocalDirectory\\ApplicationSuite\" -Name \"Fixed*Accounting\"\nShows the label files for ApplicationSuite package where the name fits the search \"Fixed*Accounting\"\n-------------------------- EXAMPLE 3 --------------------------\nPS C:\\\u003eGet-D365InstalledPackage -Name \"ApplicationSuite\" | Get-D365PackageLabelFile\nShows all label files (en-US) for the ApplicationSuite package",
        "Syntax":  "Get-D365PackageLabelFile [-PackageDirectory] \u003cString\u003e [[-Name] \u003cString\u003e] [[-Language] \u003cString\u003e] [\u003cCommonParameters\u003e]\nGet-D365PackageLabelFile [-PackageDirectory] \u003cString\u003e [[-Name] \u003cString\u003e] [[-Language] \u003cString\u003e] [\u003cCommonParameters\u003e]"
    },
    {
        "CommandName":  "Get-D365ProductInformation",
        "Description":  "Gets detailed information about application and platform",
        "Params":  [

                   ],
        "Alias":  "",
        "Author":  "Rasmus Andersen (@ITRasmus)",
        "Synopsis":  "Returns information about D365FO",
        "Name":  "Get-D365ProductInformation",
        "Links":  null,
        "Examples":  "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\\u003eGet-ProductInfoProvider\nThis will get product, platform and application version details for the environment",
        "Syntax":  "Get-D365ProductInformation [\u003cCommonParameters\u003e]"
    },
    {
        "CommandName":  "Get-D365Runbook",
        "Description":  "Get the full path and filename of a Dynamics 365 Runbook",
        "Params":  [
                       [
                           "Path",
                           "Path to the folder containing the runbook files\nThe default path is \"InstallationRecord\" which is normally located on the \"C:\\DynamicsAX\\InstallationRecords\"",
                           "",
                           false,
                           "true (ByValue, ByPropertyName)",
                           "(Join-Path $Script:InstallationRecordsDir \"Runbooks\")"
                       ],
                       [
                           "Name",
                           "Name of the runbook file that you are looking for\nThe parameter accepts wildcards. E.g. -Name *hotfix-20181024*",
                           "",
                           false,
                           "false",
                           "*"
                       ],
                       [
                           "Latest",
                           "Switch to instruct the cmdlet to only get the latest runbook file, based on the last written attribute",
                           "",
                           false,
                           "false",
                           "False"
                       ]
                   ],
        "Alias":  "",
        "Author":  "Mötz Jensen (@Splaxi)",
        "Synopsis":  "Get a Dynamics 365 Runbook",
        "Name":  "Get-D365Runbook",
        "Links":  null,
        "Examples":  "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\\u003eGet-D365Runbook\nThis will list all runbooks that are available in the default location.\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\\u003eGet-D365Runbook -Latest\nThis will get the latest runbook file from the default InstallationRecords directory on the machine.\n-------------------------- EXAMPLE 3 --------------------------\nPS C:\\\u003eGet-D365Runbook -Latest | Invoke-D365RunbookAnalyzer\nThis will find the latest runbook file and have it analyzed by the Invoke-D365RunbookAnalyzer cmdlet to output any error details.\n-------------------------- EXAMPLE 4 --------------------------\nPS C:\\\u003eGet-D365Runbook -Latest | Invoke-D365RunbookAnalyzer | Out-File \"C:\\Temp\\d365fo.tools\\runbook-analyze-results.xml\"\nThis will find the latest runbook file and have it analyzed by the Invoke-D365RunbookAnalyzer cmdlet to output any error details.\r\nThe output will be saved into the \"C:\\Temp\\d365fo.tools\\runbook-analyze-results.xml\" file.\n-------------------------- EXAMPLE 5 --------------------------\nPS C:\\\u003eGet-D365Runbook | ForEach-Object {$_.File | Copy-Item -Destination c:\\temp\\d365fo.tools }\nThis will save a copy of all runbooks from the default location and save them to \"c:\\temp\\d365fo.tools\"\n-------------------------- EXAMPLE 6 --------------------------\nPS C:\\\u003enotepad.exe (Get-D365Runbook -Latest).File\nThis will find the latest runbook file and open it with notepad.",
        "Syntax":  "Get-D365Runbook [[-Path] \u003cString\u003e] [-Name \u003cString\u003e] [-Latest] [\u003cCommonParameters\u003e]"
    },
    {
        "CommandName":  "Get-D365SDPCleanUp",
        "Description":  "Gets the configured retention period before updates are deleted",
        "Params":  [

                   ],
        "Alias":  "",
        "Synopsis":  "Get the cleanup retention period",
        "Name":  "Get-D365SDPCleanUp",
        "Links":  null,
        "Examples":  "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\\u003eGet-D365SDPCleanUp\nThis will get the configured retention period from the registry",
        "Syntax":  "Get-D365SDPCleanUp [\u003cCommonParameters\u003e]"
    },
    {
        "CommandName":  "Get-D365Table",
        "Description":  "Get a table either by TableName (wildcard search allowed) or by TableId",
        "Params":  [
                       [
                           "Name",
                           "Name of the table that you are looking for\nAccepts wildcards for searching. E.g. -Name \"Cust*\"\nDefault value is \"*\" which will search for all tables",
                           "",
                           false,
                           "false",
                           "*"
                       ],
                       [
                           "Id",
                           "The specific id for the table you are looking for",
                           "",
                           true,
                           "false",
                           "0"
                       ],
                       [
                           "DatabaseServer",
                           "The name of the database server\nIf on-premises or classic SQL Server, use either short name og Fully Qualified Domain Name (FQDN)\nIf Azure use the full address to the database server, e.g. server.database.windows.net",
                           "",
                           false,
                           "false",
                           "$Script:DatabaseServer"
                       ],
                       [
                           "DatabaseName",
                           "The name of the database",
                           "",
                           false,
                           "false",
                           "$Script:DatabaseName"
                       ],
                       [
                           "SqlUser",
                           "The login name for the SQL Server instance",
                           "",
                           false,
                           "false",
                           "$Script:DatabaseUserName"
                       ],
                       [
                           "SqlPwd",
                           "The password for the SQL Server user",
                           "",
                           false,
                           "false",
                           "$Script:DatabaseUserPassword"
                       ]
                   ],
        "Alias":  "",
        "Author":  "Mötz Jensen (@splaxi)",
        "Synopsis":  "Get a table",
        "Name":  "Get-D365Table",
        "Links":  null,
        "Examples":  "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\\u003eGet-D365Table -Name CustTable\nWill get the details for the CustTable\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\\u003eGet-D365Table -Id 10347\nWill get the details for the table with the id 10347.",
        "Syntax":  "Get-D365Table [[-Name] \u003cString[]\u003e] [[-DatabaseServer] \u003cString\u003e] [[-DatabaseName] \u003cString\u003e] [[-SqlUser] \u003cString\u003e] [[-SqlPwd] \u003cString\u003e] [\u003cCommonParameters\u003e]\nGet-D365Table [-Id] \u003cInt32\u003e [[-DatabaseServer] \u003cString\u003e] [[-DatabaseName] \u003cString\u003e] [[-SqlUser] \u003cString\u003e] [[-SqlPwd] \u003cString\u003e] [\u003cCommonParameters\u003e]"
    },
    {
        "CommandName":  "Get-D365TableField",
        "Description":  "Get a field either by FieldName (wildcard search allowed) or by FieldId",
        "Params":  [
                       [
                           "TableId",
                           "The id of the table that the field belongs to",
                           "",
                           true,
                           "true (ByPropertyName)",
                           "0"
                       ],
                       [
                           "Name",
                           "Name of the field that you are looking for\nAccepts wildcards for searching. E.g. -Name \"Account*\"\nDefault value is \"*\" which will search for all fields",
                           "",
                           false,
                           "false",
                           "*"
                       ],
                       [
                           "FieldId",
                           "Id of the field that you are looking for\nType is integer",
                           "",
                           false,
                           "true (ByPropertyName)",
                           "0"
                       ],
                       [
                           "DatabaseServer",
                           "The name of the database server\nIf on-premises or classic SQL Server, use either short name og Fully Qualified Domain Name (FQDN)\nIf Azure use the full address to the database server, e.g. server.database.windows.net",
                           "",
                           false,
                           "false",
                           "$Script:DatabaseServer"
                       ],
                       [
                           "DatabaseName",
                           "The name of the database",
                           "",
                           false,
                           "false",
                           "$Script:DatabaseName"
                       ],
                       [
                           "SqlUser",
                           "The login name for the SQL Server instance",
                           "",
                           false,
                           "false",
                           "$Script:DatabaseUserName"
                       ],
                       [
                           "SqlPwd",
                           "The password for the SQL Server user",
                           "",
                           false,
                           "false",
                           "$Script:DatabaseUserPassword"
                       ],
                       [
                           "TableName",
                           "Name of the table that the field belongs to\nSearch will only return the first hit (unordered) and work against that hit",
                           "",
                           true,
                           "false",
                           ""
                       ],
                       [
                           "IncludeTableDetails",
                           "Switch options to enable the result set to include extended details",
                           "",
                           false,
                           "false",
                           "False"
                       ],
                       [
                           "SearchAcrossTables",
                           "Switch options to force the cmdlet to search across all tables when looking for the field",
                           "",
                           true,
                           "false",
                           "False"
                       ]
                   ],
        "Alias":  "",
        "Author":  "Mötz Jensen (@splaxi)",
        "Synopsis":  "Get a field from table",
        "Name":  "Get-D365TableField",
        "Links":  null,
        "Examples":  "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\\u003eGet-D365TableField -TableId 10347\nWill get all field details for the table with id 10347.\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\\u003eGet-D365TableField -TableName CustTable\nWill get all field details for the CustTable table.\n-------------------------- EXAMPLE 3 --------------------------\nPS C:\\\u003eGet-D365TableField -TableId 10347 -FieldId 175\nWill get the details for the field with id 175 that belongs to the table with id 10347.\n-------------------------- EXAMPLE 4 --------------------------\nPS C:\\\u003eGet-D365TableField -TableId 10347 -Name \"VATNUM\"\nWill get the details for the \"VATNUM\" that belongs to the table with id 10347.\n-------------------------- EXAMPLE 5 --------------------------\nPS C:\\\u003eGet-D365TableField -TableId 10347 -Name \"VAT*\"\nWill get the details for all fields that fits the search \"VAT*\" that belongs to the table with id 10347.\n-------------------------- EXAMPLE 6 --------------------------\nPS C:\\\u003eGet-D365TableField -Name AccountNum -SearchAcrossTables\nWill search for the AccountNum field across all tables.",
        "Syntax":  "Get-D365TableField [-TableId] \u003cInt32\u003e [[-Name] \u003cString\u003e] [[-FieldId] \u003cInt32\u003e] [[-DatabaseServer] \u003cString\u003e] [[-DatabaseName] \u003cString\u003e] [[-SqlUser] \u003cString\u003e] [[-SqlPwd] \u003cString\u003e] [-IncludeTableDetails] [\u003cCommonParameters\u003e]\nGet-D365TableField [[-Name] \u003cString\u003e] [[-DatabaseServer] \u003cString\u003e] [[-DatabaseName] \u003cString\u003e] [[-SqlUser] \u003cString\u003e] [[-SqlPwd] \u003cString\u003e] [-SearchAcrossTables] [\u003cCommonParameters\u003e]\nGet-D365TableField [[-Name] \u003cString\u003e] [[-FieldId] \u003cInt32\u003e] [[-DatabaseServer] \u003cString\u003e] [[-DatabaseName] \u003cString\u003e] [[-SqlUser] \u003cString\u003e] [[-SqlPwd] \u003cString\u003e] [-TableName] \u003cString\u003e [-IncludeTableDetails] [\u003cCommonParameters\u003e]"
    },
    {
        "CommandName":  "Get-D365TableSequence",
        "Description":  "Get the sequence details for tables",
        "Params":  [
                       [
                           "TableName",
                           "Name of the table that you want to work against\nAccepts wildcards for searching. E.g. -TableName \"Cust*\"\nDefault value is \"*\" which will search for all tables",
                           "Name",
                           false,
                           "true (ByPropertyName)",
                           "*"
                       ],
                       [
                           "DatabaseServer",
                           "The name of the database server\nIf on-premises or classic SQL Server, use either short name og Fully Qualified Domain Name (FQDN).\nIf Azure use the full address to the database server, e.g. server.database.windows.net",
                           "",
                           false,
                           "false",
                           "$Script:DatabaseServer"
                       ],
                       [
                           "DatabaseName",
                           "The name of the database",
                           "",
                           false,
                           "false",
                           "$Script:DatabaseName"
                       ],
                       [
                           "SqlUser",
                           "The login name for the SQL Server instance",
                           "",
                           false,
                           "false",
                           "$Script:DatabaseUserName"
                       ],
                       [
                           "SqlPwd",
                           "The password for the SQL Server user.",
                           "",
                           false,
                           "false",
                           "$Script:DatabaseUserPassword"
                       ]
                   ],
        "Alias":  "",
        "Author":  "Mötz Jensen (@Splaxi)",
        "Synopsis":  "Get the sequence object for table",
        "Name":  "Get-D365TableSequence",
        "Links":  null,
        "Examples":  "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\\u003eGet-D365TableSequence | Format-Table\nThis will get all the sequence details for all tables inside the database.\r\nIt will format the output as a table for better overview.\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\\u003eGet-D365TableSequence -TableName \"Custtable\" | Format-Table\nThis will get the sequence details for the CustTable in the database.\r\nIt will format the output as a table for better overview.\n-------------------------- EXAMPLE 3 --------------------------\nPS C:\\\u003eGet-D365TableSequence -TableName \"Cust*\" | Format-Table\nThis will get the sequence details for all tables that matches the search \"Cust*\" in the database.\r\nIt will format the output as a table for better overview.\n-------------------------- EXAMPLE 4 --------------------------\nPS C:\\\u003eGet-D365Table -Name CustTable | Get-D365TableSequence | Format-Table\nThis will get the table details from the Get-D365Table cmdlet and pipe that into Get-D365TableSequence.\r\nThis will get the sequence details for the CustTable in the database.\r\nIt will format the output as a table for better overview.",
        "Syntax":  "Get-D365TableSequence [[-TableName] \u003cString\u003e] [[-DatabaseServer] \u003cString\u003e] [[-DatabaseName] \u003cString\u003e] [[-SqlUser] \u003cString\u003e] [[-SqlPwd] \u003cString\u003e] [\u003cCommonParameters\u003e]"
    },
    {
        "CommandName":  "Get-D365TfsUri",
        "Description":  "Gets the URI from the configuration of the local tfs connection in visual studio",
        "Params":  [
                       [
                           "Path",
                           "Path to the tf.exe file that the cmdlet will invoke",
                           "",
                           false,
                           "false",
                           "$Script:TfDir"
                       ]
                   ],
        "Alias":  "",
        "Author":  "Mötz Jensen (@Splaxi)",
        "Synopsis":  "Get the TFS / VSTS registered URL / URI",
        "Name":  "Get-D365TfsUri",
        "Links":  null,
        "Examples":  "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\\u003eGet-D365TfsUri\nThis will invoke the default tf.exe client located in the Visual Studio 2015 directory\r\nand fetch the configured URI.",
        "Syntax":  "Get-D365TfsUri [[-Path] \u003cString\u003e] [\u003cCommonParameters\u003e]"
    },
    {
        "CommandName":  "Get-D365TfsWorkspace",
        "Description":  "Gets the workspace path from the configuration of the local tfs in visual studio",
        "Params":  [
                       [
                           "Path",
                           "Path to the directory where the Team Foundation Client executable is located",
                           "",
                           false,
                           "false",
                           "$Script:TfDir"
                       ],
                       [
                           "TfsUri",
                           "Uri to the TFS / VSTS that the workspace is connected to",
                           "",
                           false,
                           "true (ByPropertyName)",
                           "$Script:TfsUri"
                       ]
                   ],
        "Alias":  "",
        "Author":  "Mötz Jensen (@Splaxi)",
        "Synopsis":  "Get the TFS / VSTS registered workspace path",
        "Name":  "Get-D365TfsWorkspace",
        "Links":  null,
        "Examples":  "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\\u003eGet-D365TfsWorkspace -TfsUri https://PROJECT.visualstudio.com\nThis will invoke the default tf.exe client located in the Visual Studio 2015 directory\r\nand fetch the configured URI.",
        "Syntax":  "Get-D365TfsWorkspace [[-Path] \u003cString\u003e] [[-TfsUri] \u003cString\u003e] [\u003cCommonParameters\u003e]"
    },
    {
        "CommandName":  "Get-D365Url",
        "Description":  "Get the complete URL for accessing the Dynamics 365 Finance \u0026 Operations instance running on this machine",
        "Params":  [
                       [
                           "Force",
                           "Switch to instruct the cmdlet to retrieve the name from the system files\r\ninstead of the name stored in memory after loading this module.",
                           "",
                           false,
                           "false",
                           "False"
                       ]
                   ],
        "Alias":  "",
        "Author":  "Rasmus Andersen (@ITRasmus)",
        "Synopsis":  "Get the url for accessing the instance",
        "Name":  "Get-D365Url",
        "Links":  null,
        "Examples":  "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\\u003eGet-D365Url\nThis will get the correct URL to access the environment",
        "Syntax":  "Get-D365Url [-Force] [\u003cCommonParameters\u003e]"
    },
    {
        "CommandName":  "Get-D365User",
        "Description":  "Get all relevant user details from the Dynamics 365 for Finance \u0026 Operations",
        "Params":  [
                       [
                           "DatabaseServer",
                           "The name of the database server\nIf on-premises or classic SQL Server, use either short name og Fully Qualified Domain Name (FQDN).\nIf Azure use the full address to the database server, e.g. server.database.windows.net",
                           "",
                           false,
                           "false",
                           "$Script:DatabaseServer"
                       ],
                       [
                           "DatabaseName",
                           "The name of the database",
                           "",
                           false,
                           "false",
                           "$Script:DatabaseName"
                       ],
                       [
                           "SqlUser",
                           "The login name for the SQL Server instance",
                           "",
                           false,
                           "false",
                           "$Script:DatabaseUserName"
                       ],
                       [
                           "SqlPwd",
                           "The password for the SQL Server user.",
                           "",
                           false,
                           "false",
                           "$Script:DatabaseUserPassword"
                       ],
                       [
                           "Email",
                           "The search string to select which user(s) should be updated.\nThe parameter supports wildcards. E.g. -Email \"*@contoso.com*\"\nDefault value is \"*\" to get all users",
                           "",
                           false,
                           "false",
                           "*"
                       ]
                   ],
        "Alias":  "",
        "Synopsis":  "Get users from the environment",
        "Name":  "Get-D365User",
        "Links":  null,
        "Examples":  "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\\u003eGet-D365User\nThis will get all users from the environment\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\\u003eGet-D365User -Email \"*contoso.com\"\nThis will search for all users with an e-mail address containing \u0027contoso.com\u0027 from the environment",
        "Syntax":  "Get-D365User [[-DatabaseServer] \u003cString\u003e] [[-DatabaseName] \u003cString\u003e] [[-SqlUser] \u003cString\u003e] [[-SqlPwd] \u003cString\u003e] [[-Email] \u003cString\u003e] [\u003cCommonParameters\u003e]"
    },
    {
        "CommandName":  "Get-D365UserAuthenticationDetail",
        "Description":  "The cmdlet will take the e-mail parameter and use it to lookup all the needed details for configuring authentication against Dynamics 365 Finance \u0026 Operations",
        "Params":  [
                       [
                           "Email",
                           "The e-mail address / login name of the user that the cmdlet must gather details about",
                           "",
                           true,
                           "true (ByValue)",
                           ""
                       ]
                   ],
        "Alias":  "",
        "Synopsis":  "Cmdlet used to get authentication details about a user",
        "Name":  "Get-D365UserAuthenticationDetail",
        "Links":  null,
        "Examples":  "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\\u003eGet-D365UserAuthenticationDetail -Email \"Claire@contoso.com\"\nThis will get all the authentication details for the user account with the email address \"Claire@contoso.com\"",
        "Syntax":  "Get-D365UserAuthenticationDetail [-Email] \u003cString\u003e [\u003cCommonParameters\u003e]"
    },
    {
        "CommandName":  "Get-D365WindowsActivationStatus",
        "Description":  "Get all the important license and activation information from the machine",
        "Params":  [

                   ],
        "Alias":  "",
        "Author":  "Mötz Jensen (@Splaxi)",
        "Synopsis":  "Get activation status",
        "Name":  "Get-D365WindowsActivationStatus",
        "Links":  null,
        "Examples":  "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\\u003eGet-D365WindowsActivationStatus\nThis will get the remaining grace and rearm activation information for the machine",
        "Syntax":  "Get-D365WindowsActivationStatus [\u003cCommonParameters\u003e]"
    },
    {
        "CommandName":  "Import-D365AadUser",
        "Description":  "Provides a method for importing a AAD UserGroup or a comma separated list of AadUsers into D365FO.",
        "Params":  [
                       [
                           "AadGroupName",
                           "Azure Active directory user group containing users to be imported",
                           "",
                           true,
                           "false",
                           ""
                       ],
                       [
                           "Users",
                           "Array of users that you want to import into the D365FO environment",
                           "",
                           true,
                           "false",
                           ""
                       ],
                       [
                           "StartupCompany",
                           "Startup company of users imported.\nDefault is DAT",
                           "",
                           false,
                           "false",
                           "DAT"
                       ],
                       [
                           "DatabaseServer",
                           "Alternative SQL Database server, Default is the one provided by the DataAccess object",
                           "",
                           false,
                           "false",
                           "$Script:DatabaseServer"
                       ],
                       [
                           "DatabaseName",
                           "Alternative SQL Database, Default is the one provided by the DataAccess object",
                           "",
                           false,
                           "false",
                           "$Script:DatabaseName"
                       ],
                       [
                           "SqlUser",
                           "Alternative SQL user, Default is the one provided by the DataAccess object",
                           "",
                           false,
                           "false",
                           "$Script:DatabaseUserName"
                       ],
                       [
                           "SqlPwd",
                           "Alternative SQL user password, Default is the one provided by the DataAccess object",
                           "",
                           false,
                           "false",
                           "$Script:DatabaseUserPassword"
                       ],
                       [
                           "IdPrefix",
                           "A text that will be prefixed into the ID field. E.g. -IdPrefix \"EXT-\" will import users and set ID starting with \"EXT-...\"",
                           "",
                           false,
                           "false",
                           ""
                       ],
                       [
                           "NameSuffix",
                           "A text that will be suffixed into the NAME field. E.g. -NameSuffix \"(Contoso)\" will import users and append \"(Contoso)\"\" to the NAME",
                           "",
                           false,
                           "false",
                           ""
                       ],
                       [
                           "IdValue",
                           "Specify which field to use as ID value when importing the users.\r\nAvailable options \u0027Login\u0027 / \u0027FirstName\u0027\nDefault is \u0027Login\u0027",
                           "",
                           false,
                           "false",
                           "Login"
                       ],
                       [
                           "NameValue",
                           "Specify which field to use as NAME value when importing the users.\r\nAvailable options \u0027FirstName\u0027 / \u0027DisplayName\u0027\nDefault is \u0027DisplayName\u0027",
                           "",
                           false,
                           "false",
                           "DisplayName"
                       ],
                       [
                           "AzureAdCredential",
                           "Use a PSCredential object for connecting with AzureAd",
                           "",
                           false,
                           "false",
                           ""
                       ],
                       [
                           "SkipAzureAd",
                           "Switch to instruct the cmdlet to skip validating against the Azure Active Directory",
                           "",
                           false,
                           "false",
                           "False"
                       ],
                       [
                           "ForceExactAadGroupName",
                           "Force to find the exact name of the Azure Active Directory Group",
                           "",
                           false,
                           "false",
                           "False"
                       ],
                       [
                           "AadGroupId",
                           "Azure Active directory user group ID containing users to be imported",
                           "",
                           true,
                           "false",
                           ""
                       ]
                   ],
        "Alias":  "",
        "Author":  "Rasmus Andersen (@ITRasmus)",
        "Synopsis":  "Used to import Aad users into D365FO",
        "Name":  "Import-D365AadUser",
        "Links":  null,
        "Examples":  "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\\u003eImport-D365AadUser -Users \"Claire@contoso.com\",\"Allen@contoso.com\"\nImports Claire and Allen as users\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\\u003e$myPassword = ConvertTo-SecureString \"MyPasswordIsSecret\" -AsPlainText -Force\nPS C:\\\u003e $myCredentials = New-Object System.Management.Automation.PSCredential (\"MyEmailIsAlso\", $myPassword)\nPS C:\\\u003e Import-D365AadUser -Users \"Claire@contoso.com\",\"Allen@contoso.com\" -AzureAdCredential $myCredentials\nThis will import Claire and Allen as users.\n-------------------------- EXAMPLE 3 --------------------------\nPS C:\\\u003eImport-D365AadUser -AadGroupName \"CustomerTeam1\"\nif more than one group match the AadGroupName, you can use the ExactAadGroupName parameter\r\nImport-D365AadUser -AadGroupName \"CustomerTeam1\" -ForceExactAadGroupName\n-------------------------- EXAMPLE 4 --------------------------\nPS C:\\\u003eImport-D365AadUser -AadGroupId \"99999999-aaaa-bbbb-cccc-9999999999\"\nImports all the users that is present in the AAD Group called CustomerTeam1",
        "Syntax":  "Import-D365AadUser [-Users] \u003cString[]\u003e [[-StartupCompany] \u003cString\u003e] [[-DatabaseServer] \u003cString\u003e] [[-DatabaseName] \u003cString\u003e] [[-SqlUser] \u003cString\u003e] [[-SqlPwd] \u003cString\u003e] [[-IdPrefix] \u003cString\u003e] [[-NameSuffix] \u003cString\u003e] [[-IdValue] \u003cString\u003e] [[-NameValue] \u003cString\u003e] [[-AzureAdCredential] \u003cPSCredential\u003e] [[-SkipAzureAd]] [\u003cCommonParameters\u003e]\nImport-D365AadUser [-AadGroupName] \u003cString\u003e [[-StartupCompany] \u003cString\u003e] [[-DatabaseServer] \u003cString\u003e] [[-DatabaseName] \u003cString\u003e] [[-SqlUser] \u003cString\u003e] [[-SqlPwd] \u003cString\u003e] [[-IdPrefix] \u003cString\u003e] [[-NameSuffix] \u003cString\u003e] [[-IdValue] \u003cString\u003e] [[-NameValue] \u003cString\u003e] [[-AzureAdCredential] \u003cPSCredential\u003e] [[-ForceExactAadGroupName]] [\u003cCommonParameters\u003e]\nImport-D365AadUser [[-StartupCompany] \u003cString\u003e] [[-DatabaseServer] \u003cString\u003e] [[-DatabaseName] \u003cString\u003e] [[-SqlUser] \u003cString\u003e] [[-SqlPwd] \u003cString\u003e] [[-IdPrefix] \u003cString\u003e] [[-NameSuffix] \u003cString\u003e] [[-IdValue] \u003cString\u003e] [[-NameValue] \u003cString\u003e] [[-AzureAdCredential] \u003cPSCredential\u003e] [-AadGroupId] \u003cString\u003e [\u003cCommonParameters\u003e]"
    },
    {
        "CommandName":  "Import-D365Bacpac",
        "Description":  "Import a bacpac file to either a Tier1 or Tier2 environment",
        "Params":  [
                       [
                           "ImportModeTier1",
                           "Switch to instruct the cmdlet that it will import into a Tier1 environment\nThe cmdlet will expect to work against a SQL Server instance",
                           "",
                           true,
                           "false",
                           "False"
                       ],
                       [
                           "ImportModeTier2",
                           "Switch to instruct the cmdlet that it will import into a Tier2 environment\nThe cmdlet will expect to work against an Azure DB instance",
                           "",
                           true,
                           "false",
                           "False"
                       ],
                       [
                           "DatabaseServer",
                           "The name of the database server\nIf on-premises or classic SQL Server, use either short name og Fully Qualified Domain Name (FQDN).\nIf Azure use the full address to the database server, e.g. server.database.windows.net",
                           "",
                           false,
                           "false",
                           "$Script:DatabaseServer"
                       ],
                       [
                           "DatabaseName",
                           "The name of the database",
                           "",
                           false,
                           "false",
                           "$Script:DatabaseName"
                       ],
                       [
                           "SqlUser",
                           "The login name for the SQL Server instance",
                           "",
                           false,
                           "false",
                           "$Script:DatabaseUserName"
                       ],
                       [
                           "SqlPwd",
                           "The password for the SQL Server user",
                           "",
                           false,
                           "false",
                           "$Script:DatabaseUserPassword"
                       ],
                       [
                           "BacpacFile",
                           "Path to the bacpac file you want to import into the database server",
                           "File",
                           true,
                           "true (ByPropertyName)",
                           ""
                       ],
                       [
                           "NewDatabaseName",
                           "Name of the new database that will be created while importing the bacpac file\nThis will create a new database on the database server and import the content of the bacpac into",
                           "",
                           true,
                           "false",
                           ""
                       ],
                       [
                           "AxDeployExtUserPwd",
                           "Password that is obtained from LCS",
                           "",
                           false,
                           "false",
                           ""
                       ],
                       [
                           "AxDbAdminPwd",
                           "Password that is obtained from LCS",
                           "",
                           false,
                           "false",
                           ""
                       ],
                       [
                           "AxRuntimeUserPwd",
                           "Password that is obtained from LCS",
                           "",
                           false,
                           "false",
                           ""
                       ],
                       [
                           "AxMrRuntimeUserPwd",
                           "Password that is obtained from LCS",
                           "",
                           false,
                           "false",
                           ""
                       ],
                       [
                           "AxRetailRuntimeUserPwd",
                           "Password that is obtained from LCS",
                           "",
                           false,
                           "false",
                           ""
                       ],
                       [
                           "AxRetailDataSyncUserPwd",
                           "Password that is obtained from LCS",
                           "",
                           false,
                           "false",
                           ""
                       ],
                       [
                           "CustomSqlFile",
                           "Parameter description",
                           "",
                           false,
                           "false",
                           ""
                       ],
                       [
                           "ImportOnly",
                           "Switch to instruct the cmdlet to only import the bacpac into the new database\nThe cmdlet will create a new database and import the content of the bacpac file into this\nNothing else will be executed",
                           "",
                           false,
                           "false",
                           "False"
                       ]
                   ],
        "Alias":  "",
        "Author":  "Rasmus Andersen (@ITRasmus)",
        "Synopsis":  "Import a bacpac file",
        "Name":  "Import-D365Bacpac",
        "Links":  null,
        "Examples":  "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\\u003eImport-D365Bacpac -ImportModeTier1 -BacpacFile \"C:\\temp\\uat.bacpac\" -NewDatabaseName \"ImportedDatabase\"\nThis will instruct the cmdlet that the import will be working against a SQL Server instance.\r\nIt will import the \"C:\\temp\\uat.bacpac\" file into a new database named \"ImportedDatabase\".\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\\u003eImport-D365Bacpac -ImportModeTier2 -SqlUser \"sqladmin\" -SqlPwd \"XyzXyz\" -BacpacFile \"C:\\temp\\uat.bacpac\" -AxDeployExtUserPwd \"XxXx\" -AxDbAdminPwd \"XxXx\" -AxRuntimeUserPwd \"XxXx\" -AxMrRuntimeUse\r\nrPwd \"XxXx\" -AxRetailRuntimeUserPwd \"XxXx\" -AxRetailDataSyncUserPwd \"XxXx\" -NewDatabaseName \"ImportedDatabase\"\nThis will instruct the cmdlet that the import will be working against an Azure DB instance.\r\nIt requires all relevant passwords from LCS for all the builtin user accounts used in a Tier 2\r\nenvironment.\r\nIt will import the \"C:\\temp\\uat.bacpac\" file into a new database named \"ImportedDatabase\".",
        "Syntax":  "Import-D365Bacpac [-ImportModeTier1] [[-DatabaseServer] \u003cString\u003e] [[-DatabaseName] \u003cString\u003e] [[-SqlUser] \u003cString\u003e] [[-SqlPwd] \u003cString\u003e] [-BacpacFile] \u003cString\u003e [-NewDatabaseName] \u003cString\u003e [[-CustomSqlFile] \u003cString\u003e] [-ImportOnly] [\u003cCommonParameters\u003e]\nImport-D365Bacpac [-ImportModeTier2] [[-DatabaseServer] \u003cString\u003e] [[-DatabaseName] \u003cString\u003e] [-SqlUser] \u003cString\u003e [-SqlPwd] \u003cString\u003e [-BacpacFile] \u003cString\u003e [-NewDatabaseName] \u003cString\u003e [[-AxDeployExtUserPwd] \u003cString\u003e] [[-AxDbAdminPwd] \u003cString\u003e] [[-AxRuntimeUserPwd] \u003cString\u003e] [[-AxMrRuntimeUserPwd] \u003cString\u003e] [[-AxRetailRuntimeUserPwd] \u003cString\u003e] [[-AxRetailDataSyncUserPwd] \u003cString\u003e] [[-CustomSqlFile] \u003cString\u003e] -ImportOnly [\u003cCommonParameters\u003e]\nImport-D365Bacpac [-ImportModeTier2] [[-DatabaseServer] \u003cString\u003e] [[-DatabaseName] \u003cString\u003e] [-SqlUser] \u003cString\u003e [-SqlPwd] \u003cString\u003e [-BacpacFile] \u003cString\u003e [-NewDatabaseName] \u003cString\u003e [-AxDeployExtUserPwd] \u003cString\u003e [-AxDbAdminPwd] \u003cString\u003e [-AxRuntimeUserPwd] \u003cString\u003e [-AxMrRuntimeUserPwd] \u003cString\u003e [-AxRetailRuntimeUserPwd] \u003cString\u003e [-AxRetailDataSyncUserPwd] \u003cString\u003e [[-CustomSqlFile] \u003cString\u003e] [\u003cCommonParameters\u003e]"
    },
    {
        "CommandName":  "Initialize-D365TestAutomationCertificate",
        "Description":  "Creates a new self signed certificate for automated testing and reconfigures the AOS Windows Identity Foundation configuration to trust the certificate",
        "Params":  [
                       [
                           "CertificateFileName",
                           "Filename to be used when exporting the cer file",
                           "",
                           false,
                           "false",
                           "(Join-Path $env:TEMP \"TestAuthCert.cer\")"
                       ],
                       [
                           "PrivateKeyFileName",
                           "Filename to be used when exporting the pfx file",
                           "",
                           false,
                           "false",
                           "(Join-Path $env:TEMP \"TestAuthCert.pfx\")"
                       ],
                       [
                           "Password",
                           "The password that you want to use to protect your certificate with",
                           "",
                           false,
                           "false",
                           "(ConvertTo-SecureString -String \"Password1\" -Force -AsPlainText)"
                       ]
                   ],
        "Alias":  "",
        "Author":  "Kenny Saelen (@kennysaelen)",
        "Synopsis":  "Create and configure test automation certificate",
        "Name":  "Initialize-D365TestAutomationCertificate",
        "Links":  null,
        "Examples":  "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\\u003eInitialize-D365TestAutomationCertificate\nThis will generate a certificate for issuer 127.0.0.1 and install it in the trusted root certificates and modify the wif.config of the AOS to include the thumbprint and trust the certificate.",
        "Syntax":  "Initialize-D365TestAutomationCertificate [[-CertificateFileName] \u003cString\u003e] [[-PrivateKeyFileName] \u003cString\u003e] [[-Password] \u003cSecureString\u003e] [\u003cCommonParameters\u003e]"
    },
    {
        "CommandName":  "Invoke-D365AzureStorageDownload",
        "Description":  "Download any file to an Azure Storage Account",
        "Params":  [
                       [
                           "AccountId",
                           "Storage Account Name / Storage Account Id where you want to fetch the file from",
                           "",
                           false,
                           "false",
                           "$Script:AccountId"
                       ],
                       [
                           "AccessToken",
                           "The token that has the needed permissions for the download action",
                           "",
                           false,
                           "false",
                           "$Script:AccessToken"
                       ],
                       [
                           "Blobname",
                           "Name of the container / blog inside the storage account you where the file is",
                           "",
                           false,
                           "false",
                           "$Script:Blobname"
                       ],
                       [
                           "FileName",
                           "Name of the file that you want to download",
                           "Name",
                           true,
                           "true (ByPropertyName)",
                           ""
                       ],
                       [
                           "Path",
                           "Path to the folder / location you want to save the file\nThe default path is \"c:\\temp\\d365fo.tools\"",
                           "",
                           false,
                           "false",
                           "$Script:DefaultTempPath"
                       ],
                       [
                           "GetLatest",
                           "Switch to tell the cmdlet just to download the latest file from Azure regardless of name",
                           "",
                           true,
                           "false",
                           "False"
                       ]
                   ],
        "Alias":  "",
        "Author":  "Mötz Jensen (@Splaxi)",
        "Synopsis":  "Download a file to Azure",
        "Name":  "Invoke-D365AzureStorageDownload",
        "Links":  null,
        "Examples":  "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\\u003eInvoke-D365AzureStorageDownload -AccountId \"miscfiles\" -AccessToken \"xx508xx63817x752xx74004x30705xx92x58349x5x78f5xx34xxxxx51\" -Blobname \"backupfiles\" -FileName \"OriginalUAT.bacpac\" -Path \"c:\\\r\ntemp\"\nWill download the \"OriginalUAT.bacpac\" file from the storage account and save it to \"c:\\temp\\OriginalUAT.bacpac\"\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\\u003eInvoke-D365AzureStorageDownload -AccountId \"miscfiles\" -AccessToken \"xx508xx63817x752xx74004x30705xx92x58349x5x78f5xx34xxxxx51\" -Blobname \"backupfiles\" -Path \"c:\\temp\" -GetLatest\nWill download the file with the latest modified datetime from the storage account and save it to \"c:\\temp\\\".\r\nThe complete path to the file will returned as output from the cmdlet.\n-------------------------- EXAMPLE 3 --------------------------\nPS C:\\\u003e$AzureParams = Get-D365ActiveAzureStorageConfig\nPS C:\\\u003e Invoke-D365AzureStorageDownload @AzureParams -Path \"c:\\temp\" -GetLatest\nThis will get the current Azure Storage Account configuration details\r\nand use them as parameters to download the latest file from an Azure Storage Account\nWill download the file with the latest modified datetime from the storage account and save it to \"c:\\temp\\\".\r\nThe complete path to the file will returned as output from the cmdlet.",
        "Syntax":  "Invoke-D365AzureStorageDownload [[-AccountId] \u003cString\u003e] [[-AccessToken] \u003cString\u003e] [[-Blobname] \u003cString\u003e] [-FileName] \u003cString\u003e [[-Path] \u003cString\u003e] [\u003cCommonParameters\u003e]\nInvoke-D365AzureStorageDownload [[-AccountId] \u003cString\u003e] [[-AccessToken] \u003cString\u003e] [[-Blobname] \u003cString\u003e] [[-Path] \u003cString\u003e] [-GetLatest] [\u003cCommonParameters\u003e]"
    },
    {
        "CommandName":  "Invoke-D365AzureStorageUpload",
        "Description":  "Upload any file to an Azure Storage Account",
        "Params":  [
                       [
                           "AccountId",
                           "Storage Account Name / Storage Account Id where you want to store the file",
                           "",
                           false,
                           "false",
                           "$Script:AccountId"
                       ],
                       [
                           "AccessToken",
                           "The token that has the needed permissions for the upload action",
                           "",
                           false,
                           "false",
                           "$Script:AccessToken"
                       ],
                       [
                           "Blobname",
                           "Name of the container / blog inside the storage account you want to store the file",
                           "",
                           false,
                           "false",
                           "$Script:Blobname"
                       ],
                       [
                           "Filepath",
                           "Path to the file you want to upload",
                           "File",
                           true,
                           "true (ByValue)",
                           ""
                       ],
                       [
                           "DeleteOnUpload",
                           "Switch to tell the cmdlet if you want the local file to be deleted after the upload completes",
                           "",
                           false,
                           "false",
                           "False"
                       ]
                   ],
        "Alias":  "",
        "Author":  "Mötz Jensen (@Splaxi)",
        "Synopsis":  "Upload a file to Azure",
        "Name":  "Invoke-D365AzureStorageUpload",
        "Links":  null,
        "Examples":  "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\\u003eInvoke-D365AzureStorageUpload -AccountId \"miscfiles\" -AccessToken \"xx508xx63817x752xx74004x30705xx92x58349x5x78f5xx34xxxxx51\" -Blobname \"backupfiles\" -Filepath \"c:\\temp\\bacpac\\UAT_20180701.bacp\r\nac\" -DeleteOnUpload\nThis will upload the \"c:\\temp\\bacpac\\UAT_20180701.bacpac\" up to the \"backupfiles\" container, inside the \"miscfiles\" Azure Storage Account that is access with the \"xx508xx63817x752xx74004x30705xx92x583\r\n49x5x78f5xx34xxxxx51\" token.\r\nAfter upload the local file will be deleted.\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\\u003e$AzureParams = Get-D365ActiveAzureStorageConfig\nPS C:\\\u003e New-D365Bacpac | Invoke-D365AzureStorageUpload @AzureParams\nThis will get the current Azure Storage Account configuration details and use them as parameters to upload the file to an Azure Storage Account.",
        "Syntax":  "Invoke-D365AzureStorageUpload [[-AccountId] \u003cString\u003e] [[-AccessToken] \u003cString\u003e] [[-Blobname] \u003cString\u003e] [-Filepath] \u003cString\u003e [-DeleteOnUpload] [\u003cCommonParameters\u003e]\nInvoke-D365AzureStorageUpload [[-AccountId] \u003cString\u003e] [[-AccessToken] \u003cString\u003e] [[-Blobname] \u003cString\u003e] [-Filepath] \u003cString\u003e [-DeleteOnUpload] [\u003cCommonParameters\u003e]"
    },
    {
        "CommandName":  "Invoke-D365DataFlush",
        "Description":  "Invoke one of the runnable classes that is clearing cache, data or something else",
        "Params":  [
                       [
                           "Url",
                           "URL to the Dynamics 365 instance you want to clear the AOD cache on",
                           "",
                           false,
                           "false",
                           ""
                       ],
                       [
                           "Class",
                           "The class that you want to execute.\nDefault value is \"SysFlushAod\"",
                           "",
                           false,
                           "false",
                           "SysFlushAod"
                       ]
                   ],
        "Alias":  "",
        "Author":  "Mötz Jensen (@Splaxi)",
        "Synopsis":  "Invoke the one of the data flush classes",
        "Name":  "Invoke-D365DataFlush",
        "Links":  null,
        "Examples":  "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\\u003eInvoke-D365DataFlush\nThis will make a call against the default URL for the machine and\r\nhave it execute the SysFlushAOD class.\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\\u003eInvoke-D365DataFlush -Class SysFlushData,SysFlushAod\nThis will make a call against the default URL for the machine and\r\nhave it execute the SysFlushData and SysFlushAod classes.",
        "Syntax":  "Invoke-D365DataFlush [[-Url] \u003cString\u003e] [-Class \u003cString[]\u003e] [\u003cCommonParameters\u003e]"
    },
    {
        "CommandName":  "Invoke-D365DBSync",
        "Description":  "Uses the sync.exe (engine) to synchronize the database for the environment",
        "Params":  [
                       [
                           "BinDirTools",
                           "Path to where the tools on the machine can be found\nDefault value is normally the AOS Service PackagesLocalDirectory\\bin",
                           "",
                           false,
                           "false",
                           "$Script:BinDirTools"
                       ],
                       [
                           "MetadataDir",
                           "Path to where the tools on the machine can be found\nDefault value is normally the AOS Service PackagesLocalDirectory",
                           "",
                           false,
                           "false",
                           "$Script:MetaDataDir"
                       ],
                       [
                           "LogPath",
                           "The path where the log file will be saved",
                           "",
                           false,
                           "false",
                           "C:\\temp\\D365FO.Tools\\Sync"
                       ],
                       [
                           "SyncMode",
                           "The sync mode the sync engine will use\nDefault value is: \"FullAll\"",
                           "",
                           false,
                           "false",
                           "FullAll"
                       ],
                       [
                           "Verbosity",
                           "Parameter used to instruct the level of verbosity the sync engine has to report back\nDefault value is: \"Normal\"",
                           "",
                           false,
                           "false",
                           "Normal"
                       ],
                       [
                           "DatabaseServer",
                           "The name of the database server\nIf on-premises or classic SQL Server, use either short name og Fully Qualified Domain Name (FQDN)\nIf Azure use the full address to the database server, e.g. server.database.windows.net",
                           "",
                           false,
                           "false",
                           "$Script:DatabaseServer"
                       ],
                       [
                           "DatabaseName",
                           "The name of the database",
                           "",
                           false,
                           "false",
                           "$Script:DatabaseName"
                       ],
                       [
                           "SqlUser",
                           "The login name for the SQL Server instance",
                           "",
                           false,
                           "false",
                           "$Script:DatabaseUserName"
                       ],
                       [
                           "SqlPwd",
                           "The password for the SQL Server user",
                           "",
                           false,
                           "false",
                           "$Script:DatabaseUserPassword"
                       ]
                   ],
        "Alias":  "",
        "Author":  "Rasmus Andersen (@ITRasmus)",
        "Synopsis":  "Invoke the synchronization process used in Visual Studio",
        "Name":  "Invoke-D365DBSync",
        "Links":  null,
        "Examples":  "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\\u003eInvoke-D365DBSync\nThis will invoke the sync engine and have it work against the database.\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\\u003eInvoke-D365DBSync -Verbose\nThis will invoke the sync engine and have it work against the database. It will output the same level of details that Visual Studio would normally do.",
        "Syntax":  "Invoke-D365DBSync [[-BinDirTools] \u003cString\u003e] [[-MetadataDir] \u003cString\u003e] [[-LogPath] \u003cString\u003e] [[-SyncMode] \u003cString\u003e] [[-Verbosity] \u003cString\u003e] [[-DatabaseServer] \u003cString\u003e] [[-DatabaseName] \u003cString\u003e] [[-SqlUser] \u003cString\u003e] [[-SqlPwd] \u003cString\u003e] [\u003cCommonParameters\u003e]"
    },
    {
        "CommandName":  "Invoke-D365InstallLicense",
        "Description":  "Install a license for a 3. party solution using the builtin \"Microsoft.Dynamics.AX.Deployment.Setup.exe\" executable",
        "Params":  [
                       [
                           "Path",
                           "Path to the license file",
                           "File",
                           true,
                           "false",
                           ""
                       ],
                       [
                           "DatabaseServer",
                           "The name of the database server\nIf on-premises or classic SQL Server, use either short name og Fully Qualified Domain Name (FQDN)\nIf Azure use the full address to the database server, e.g. server.database.windows.net",
                           "",
                           false,
                           "false",
                           "$Script:DatabaseServer"
                       ],
                       [
                           "DatabaseName",
                           "The name of the database",
                           "",
                           false,
                           "false",
                           "$Script:DatabaseName"
                       ],
                       [
                           "SqlUser",
                           "The login name for the SQL Server instance",
                           "",
                           false,
                           "false",
                           "$Script:DatabaseUserName"
                       ],
                       [
                           "SqlPwd",
                           "The password for the SQL Server user",
                           "",
                           false,
                           "false",
                           "$Script:DatabaseUserPassword"
                       ],
                       [
                           "MetaDataDir",
                           "The path to the meta data directory for the environment\nDefault path is the same as the aos service PackagesLocalDirectory",
                           "",
                           false,
                           "false",
                           "\"$Script:MetaDataDir\""
                       ],
                       [
                           "BinDir",
                           "The path to the bin directory for the environment\nDefault path is the same as the aos service PackagesLocalDirectory\\bin",
                           "",
                           false,
                           "false",
                           "\"$Script:BinDir\""
                       ]
                   ],
        "Alias":  "",
        "Author":  "Mötz Jensen (@splaxi)",
        "Synopsis":  "Install a license for a 3. party solution",
        "Name":  "Invoke-D365InstallLicense",
        "Links":  null,
        "Examples":  "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\\u003eInvoke-D365InstallLicense -Path c:\\temp\\d365fo.tools\\license.txt\nThis will use the default paths and start the Microsoft.Dynamics.AX.Deployment.Setup.exe with the needed parameters to import / install the license file.",
        "Syntax":  "Invoke-D365InstallLicense [-Path] \u003cString\u003e [[-DatabaseServer] \u003cString\u003e] [[-DatabaseName] \u003cString\u003e] [[-SqlUser] \u003cString\u003e] [[-SqlPwd] \u003cString\u003e] [[-MetaDataDir] \u003cString\u003e] [[-BinDir] \u003cString\u003e] [\u003cCommonParameters\u003e]"
    },
    {
        "CommandName":  "Invoke-D365LogicApp",
        "Description":  "Invoke a Logic App using a http request and pass a json object with details about the calling function",
        "Params":  [
                       [
                           "Url",
                           "The URL for the http endpoint that you want to invoke",
                           "",
                           false,
                           "false",
                           "(Get-D365LogicAppConfig).Url"
                       ],
                       [
                           "Email",
                           "The email address of the receiver of the message that the cmdlet will send",
                           "",
                           false,
                           "false",
                           "(Get-D365LogicAppConfig).Email"
                       ],
                       [
                           "Subject",
                           "Subject string to apply to the email and to the IM message",
                           "",
                           false,
                           "false",
                           "(Get-D365LogicAppConfig).Subject"
                       ],
                       [
                           "IncludeAll",
                           "Switch to instruct the cmdlet to include all cmdlets (names only) from the pipeline",
                           "",
                           false,
                           "false",
                           "False"
                       ],
                       [
                           "AsJob",
                           "Switch to instruct the cmdlet to run the invocation as a job (async)",
                           "",
                           false,
                           "false",
                           "False"
                       ]
                   ],
        "Alias":  "",
        "Author":  "Mötz Jensen (@Splaxi)",
        "Synopsis":  "Invoke a http request for a Logic App",
        "Name":  "Invoke-D365LogicApp",
        "Links":  null,
        "Examples":  "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\\u003eInvoke-D365SyncDB | Invoke-D365LogicApp\nThis will execute the sync process and when it is done it will invoke a Azure Logic App with the default parameters that have been configured for the system.\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\\u003eInvoke-D365SyncDB | Invoke-D365LogicApp -Email administrator@contoso.com -Subject \"Work is done\" -Url https://prod-35.westeurope.logic.azure.com:443/\nThis will execute the sync process and when it is done it will invoke a Azure Logic App with the email, subject and URL parameters that are needed to invoke an Azure Logic App.",
        "Syntax":  "Invoke-D365LogicApp [[-Url] \u003cString\u003e] [[-Email] \u003cString\u003e] [[-Subject] \u003cString\u003e] [-IncludeAll] [-AsJob] [\u003cCommonParameters\u003e]"
    },
    {
        "CommandName":  "Invoke-D365ModelUtil",
        "Description":  "A cmdlet that wraps some of the cumbersome work into a streamlined process",
        "Params":  [
                       [
                           "Path",
                           "Path to the model package/file that you want to install into the environment\nThe cmdlet only supports an already extracted \".axmodel\" file",
                           "File,Model",
                           true,
                           "false",
                           ""
                       ],
                       [
                           "BinDir",
                           "The path to the bin directory for the environment\nDefault path is the same as the AOS service PackagesLocalDirectory\\bin",
                           "",
                           false,
                           "false",
                           "\"$Script:PackageDirectory\\bin\""
                       ],
                       [
                           "MetaDataDir",
                           "The path to the meta data directory for the environment\nDefault path is the same as the aos service PackagesLocalDirectory",
                           "",
                           false,
                           "false",
                           "\"$Script:MetaDataDir\""
                       ],
                       [
                           "Import",
                           "Switch to instruct the cmdlet to execute the Import functionality on ModelUtil.exe\nDefault value is: on / $true",
                           "",
                           false,
                           "false",
                           "[switch]::Present"
                       ]
                   ],
        "Alias":  "",
        "Author":  "Mötz Jensen (@Splaxi)",
        "Synopsis":  "Invoke the ModelUtil.exe",
        "Name":  "Invoke-D365ModelUtil",
        "Links":  null,
        "Examples":  "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\\u003eInvoke-D365ModelUtil -Path \"c:\\temp\\d365fo.tools\\ApplicationSuiteModernDesigns_App73.axmodel\"\nThis will execute the import functionality of ModelUtil.exe and have it import the \"ApplicationSuiteModernDesigns_App73.axmodel\" file.",
        "Syntax":  "Invoke-D365ModelUtil [-Path] \u003cString\u003e [[-BinDir] \u003cString\u003e] [[-MetaDataDir] \u003cString\u003e] [[-Import]] [\u003cCommonParameters\u003e]"
    },
    {
        "CommandName":  "Invoke-D365ReArmWindows",
        "Description":  "Function used for invoking the rearm functionality inside Windows",
        "Params":  [
                       [
                           "Restart",
                           "Instruct the cmdlet to restart the machine",
                           "",
                           false,
                           "false",
                           "False"
                       ]
                   ],
        "Alias":  "",
        "Author":  "Mötz Jensen (@Splaxi)",
        "Synopsis":  "Invokes the Rearm of Windows license",
        "Name":  "Invoke-D365ReArmWindows",
        "Links":  null,
        "Examples":  "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\\u003eInvoke-D365ReArmWindows\nThis will re arm the Windows installation if there is any activation retries left\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\\u003eInvoke-D365ReArmWindows -Restart\nThis will re arm the Windows installation if there is any activation retries left and restart the computer.",
        "Syntax":  "Invoke-D365ReArmWindows [[-Restart]] [\u003cCommonParameters\u003e]"
    },
    {
        "CommandName":  "Invoke-D365RunbookAnalyzer",
        "Description":  "Get all the important details from a failed runbook",
        "Params":  [
                       [
                           "Path",
                           "Path to the runbook file that you work against",
                           "File",
                           true,
                           "true (ByValue, ByPropertyName)",
                           ""
                       ]
                   ],
        "Alias":  "",
        "Author":  "Mötz Jensen (@Splaxi)",
        "Synopsis":  "Analyze the runbook",
        "Name":  "Invoke-D365RunbookAnalyzer",
        "Links":  null,
        "Examples":  "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\\u003eInvoke-D365RunbookAnalyzer -Path \"C:\\DynamicsAX\\InstallationRecords\\Runbooks\\Runbook.xml\"\nThis will analyze the Runbook.xml and output all the details about failed steps, the connected error logs and all the unprocessed steps.\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\\u003eGet-D365Runbook -Latest | Invoke-D365RunbookAnalyzer\nThis will find the latest runbook file and have it analyzed by the Invoke-D365RunbookAnalyzer cmdlet to output any error details.\n-------------------------- EXAMPLE 3 --------------------------\nPS C:\\\u003eGet-D365Runbook -Latest | Invoke-D365RunbookAnalyzer | Out-File \"C:\\Temp\\d365fo.tools\\runbook-analyze-results.xml\"\nThis will find the latest runbook file and have it analyzed by the Invoke-D365RunbookAnalyzer cmdlet to output any error details.\r\nThe output will be saved into the \"C:\\Temp\\d365fo.tools\\runbook-analyze-results.xml\" file.",
        "Syntax":  "Invoke-D365RunbookAnalyzer [-Path] \u003cString\u003e [\u003cCommonParameters\u003e]"
    },
    {
        "CommandName":  "Invoke-D365SCDPBundleInstall",
        "Description":  "A cmdlet that wraps some of the cumbersome work into a streamlined process",
        "Params":  [
                       [
                           "InstallOnly",
                           "Switch to instruct the cmdlet to only run the Install option and ignore any TFS / VSTS folders and source control in general\nUse it when testing an update on a local development machine (VM) / onebox",
                           "",
                           true,
                           "false",
                           "False"
                       ],
                       [
                           "Command",
                           "Parameter description",
                           "",
                           false,
                           "false",
                           "Prepare"
                       ],
                       [
                           "Path",
                           "Path to the update package that you want to install into the environment\nThe cmdlet only supports an already extracted \".axscdppkg\" file",
                           "File,Hotfix",
                           true,
                           "false",
                           ""
                       ],
                       [
                           "MetaDataDir",
                           "The path to the meta data directory for the environment\nDefault path is the same as the aos service PackagesLocalDirectory",
                           "",
                           false,
                           "false",
                           "\"$Script:MetaDataDir\""
                       ],
                       [
                           "TfsWorkspaceDir",
                           "The path to the TFS Workspace directory that you want to work against\nDefault path is the same as the aos service PackagesLocalDirectory",
                           "",
                           false,
                           "false",
                           "\"$Script:MetaDataDir\""
                       ],
                       [
                           "TfsUri",
                           "The URI for the TFS Team Site / VSTS Portal that you want to work against\nDefault URI is the one that is configured from inside Visual Studio",
                           "",
                           false,
                           "false",
                           "\"$Script:TfsUri\""
                       ],
                       [
                           "ShowModifiedFiles",
                           "Switch to instruct the cmdlet to show all the modified files afterwards",
                           "",
                           false,
                           "false",
                           "False"
                       ],
                       [
                           "ShowProgress",
                           "Switch to instruct the cmdlet to output progress details while servicing the installation",
                           "",
                           false,
                           "false",
                           "False"
                       ]
                   ],
        "Alias":  "",
        "Author":  "Mötz Jensen (@splaxi)",
        "Synopsis":  "Invoke the SCDPBundleInstall.exe file",
        "Name":  "Invoke-D365SCDPBundleInstall",
        "Links":  null,
        "Examples":  "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\\u003eInvoke-D365SCDPBundleInstall -Path \"c:\\temp\\HotfixPackageBundle.axscdppkg\" -InstallOnly\nThis will install the \"HotfixPackageBundle.axscdppkg\" into the default PackagesLocalDirectory location on the machine.",
        "Syntax":  "Invoke-D365SCDPBundleInstall [-InstallOnly] [-Path] \u003cString\u003e [[-MetaDataDir] \u003cString\u003e] [[-ShowModifiedFiles]] [[-ShowProgress]] [\u003cCommonParameters\u003e]\nInvoke-D365SCDPBundleInstall [[-Command] \u003cString\u003e] [-Path] \u003cString\u003e [[-MetaDataDir] \u003cString\u003e] [[-TfsWorkspaceDir] \u003cString\u003e] [[-TfsUri] \u003cString\u003e] [[-ShowModifiedFiles]] [[-ShowProgress]] [\u003cCommonParameters\u003e]"
    },
    {
        "CommandName":  "Invoke-D365SDPInstall",
        "Description":  "A cmdlet that wraps some of the cumbersome work into a streamlined process.\nThe process are detailed in the Microsoft documentation here:\nhttps://docs.microsoft.com/en-us/dynamics365/unified-operations/dev-itpro/deployment/install-deployable-package",
        "Params":  [
                       [
                           "Path",
                           "Path to the update package that you want to install into the environment\nThe cmdlet only supports a path to an already extracted and unblocked zip-file",
                           "File,Hotfix",
                           true,
                           "false",
                           ""
                       ],
                       [
                           "MetaDataDir",
                           "The path to the meta data directory for the environment\nDefault path is the same as the aos service PackagesLocalDirectory",
                           "",
                           false,
                           "false",
                           "\"$Script:MetaDataDir\""
                       ],
                       [
                           "QuickInstallAll",
                           "Use this switch to let the runbook reside in memory. You will not get a runbook on disc which you can examine for steps",
                           "",
                           false,
                           "false",
                           "False"
                       ],
                       [
                           "DevInstall",
                           "Use this when running on developer box without administrator privileges (Run As Administrator)",
                           "",
                           false,
                           "false",
                           "False"
                       ],
                       [
                           "Command",
                           "The command you want the cmdlet to execute when it runs the AXUpdateInstaller.exe\nValid options are:\r\nSetTopology\r\nGenerate\r\nImport\r\nExecute\r\nRunAll\r\nReRunStep\r\nSetStepComplete\r\nExport\r\nVersionCheck\nThe default value is \"SetTopology\"",
                           "",
                           true,
                           "false",
                           "SetTopology"
                       ],
                       [
                           "Step",
                           "The step number that you want to work against",
                           "",
                           false,
                           "false",
                           "0"
                       ],
                       [
                           "RunbookId",
                           "The runbook id of the runbook that you want to work against\nDefault value is \"Runbook\"",
                           "",
                           false,
                           "false",
                           "Runbook"
                       ]
                   ],
        "Alias":  "",
        "Author":  "Tommy Skaue (@skaue)",
        "Synopsis":  "Invoke the AxUpdateInstaller.exe file from Software Deployable Package (SDP)",
        "Name":  "Invoke-D365SDPInstall",
        "Links":  null,
        "Examples":  "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\\u003eInvoke-D365SDPInstall -Path \"c:\\temp\\\" -QuickInstallAll\nThis will install the extracted package in c:\\temp\\ using a runbook in memory while executing.\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\\u003eInvoke-D365SDPInstall -Path \"c:\\temp\\\" -Command SetTopology\nPS C:\\\u003e Invoke-D365SDPInstall -Path \"c:\\temp\\\" -Command Generate -RunbookId \u0027MyRunbook\u0027\r\nPS C:\\\u003e Invoke-D365SDPInstall -Path \"c:\\temp\\\" -Command Import -RunbookId \u0027MyRunbook\u0027\r\nPS C:\\\u003e Invoke-D365SDPInstall -Path \"c:\\temp\\\" -Command Execute -RunbookId \u0027MyRunbook\u0027\nManual operations that first create Topology XML from current environment, then generate runbook with id \u0027MyRunbook\u0027, then import it and finally execute it.\n-------------------------- EXAMPLE 3 --------------------------\nPS C:\\\u003eInvoke-D365SDPInstall -Path \"c:\\temp\\\" -Command RunAll\nCreate Topology XML from current environment. Using default runbook id \u0027Runbook\u0027 and run all the operations from generate, to import to execute.\n-------------------------- EXAMPLE 4 --------------------------\nPS C:\\\u003eInvoke-D365SDPInstall -Path \"c:\\temp\\\" -Command RerunStep -Step 18 -RunbookId \u0027MyRunbook\u0027\nRerun runbook with id \u0027MyRunbook\u0027 from step 18.\n-------------------------- EXAMPLE 5 --------------------------\nPS C:\\\u003eInvoke-D365SDPInstall -Path \"c:\\temp\\\" -Command SetStepComplete -Step 24 -RunbookId \u0027MyRunbook\u0027\nMark step 24 complete in runbook with id \u0027MyRunbook\u0027 and continue the runbook from the next step.",
        "Syntax":  "Invoke-D365SDPInstall [-Path] \u003cString\u003e [[-MetaDataDir] \u003cString\u003e] [[-QuickInstallAll]] [[-Step] \u003cInt32\u003e] [[-RunbookId] \u003cString\u003e] [\u003cCommonParameters\u003e]\nInvoke-D365SDPInstall [-Path] \u003cString\u003e [[-MetaDataDir] \u003cString\u003e] [[-DevInstall]] [[-Step] \u003cInt32\u003e] [[-RunbookId] \u003cString\u003e] [\u003cCommonParameters\u003e]\nInvoke-D365SDPInstall [-Path] \u003cString\u003e [[-MetaDataDir] \u003cString\u003e] [-Command] \u003cString\u003e [[-Step] \u003cInt32\u003e] [[-RunbookId] \u003cString\u003e] [\u003cCommonParameters\u003e]"
    },
    {
        "CommandName":  "Invoke-D365SeleniumDownload",
        "Description":  "Downloads the Selenium web driver files and deploys them to the specified destinations.",
        "Params":  [
                       [
                           "RegressionSuiteAutomationTool",
                           "Switch to specify if the Selenium files need to be installed in the Regression Suite Automation Tool folder.",
                           "",
                           false,
                           "false",
                           "False"
                       ],
                       [
                           "PerfSDK",
                           "Switch to specify if the Selenium files need to be installed in the PerfSDK folder.",
                           "",
                           false,
                           "false",
                           "False"
                       ]
                   ],
        "Alias":  "",
        "Author":  "Kenny Saelen (@kennysaelen)",
        "Synopsis":  "Downloads the Selenium web driver files and deploys them to the specified destinations.",
        "Name":  "Invoke-D365SeleniumDownload",
        "Links":  null,
        "Examples":  "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\\u003eInvoke-D365SeleniumDownload -RegressionSuiteAutomationTool -PerfSDK\nThis will download the Selenium zip archives and extract the files into both the Regression Suite Automation Tool folder and the PerfSDK folder.",
        "Syntax":  "Invoke-D365SeleniumDownload [[-RegressionSuiteAutomationTool]] [[-PerfSDK]] [\u003cCommonParameters\u003e]"
    },
    {
        "CommandName":  "Invoke-D365SqlScript",
        "Description":  "Execute a SQL Script against the D365FO SQL Server database",
        "Params":  [
                       [
                           "FilePath",
                           "Path to the file containing the SQL Script that you want executed",
                           "",
                           true,
                           "false",
                           ""
                       ],
                       [
                           "DatabaseServer",
                           "The name of the database server\nIf on-premises or classic SQL Server, use either short name og Fully Qualified Domain Name (FQDN).\nIf Azure use the full address to the database server, e.g. server.database.windows.net",
                           "",
                           false,
                           "false",
                           "$Script:DatabaseServer"
                       ],
                       [
                           "DatabaseName",
                           "The name of the database",
                           "",
                           false,
                           "false",
                           "$Script:DatabaseName"
                       ],
                       [
                           "SqlUser",
                           "The login name for the SQL Server instance",
                           "",
                           false,
                           "false",
                           "$Script:DatabaseUserName"
                       ],
                       [
                           "SqlPwd",
                           "The password for the SQL Server user.",
                           "",
                           false,
                           "false",
                           "$Script:DatabaseUserPassword"
                       ],
                       [
                           "TrustedConnection",
                           "Switch to instruct the cmdlet whether the connection should be using Windows Authentication or not",
                           "",
                           false,
                           "false",
                           "False"
                       ]
                   ],
        "Alias":  "",
        "Author":  "Mötz Jensen (@splaxi)",
        "Synopsis":  "Execute a SQL Script",
        "Name":  "Invoke-D365SqlScript",
        "Links":  null,
        "Examples":  "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\\u003eInvoke-D365SqlScript -FilePath \"C:\\temp\\d365fo.tools\\DeleteUser.sql\"\nThis will execute the \"C:\\temp\\d365fo.tools\\DeleteUser.sql\" against the registered SQL Server on the machine.",
        "Syntax":  "Invoke-D365SqlScript [-FilePath] \u003cString\u003e [[-DatabaseServer] \u003cString\u003e] [[-DatabaseName] \u003cString\u003e] [[-SqlUser] \u003cString\u003e] [[-SqlPwd] \u003cString\u003e] [[-TrustedConnection] \u003cBoolean\u003e] [\u003cCommonParameters\u003e]"
    },
    {
        "CommandName":  "Invoke-D365SysFlushAodCache",
        "Description":  "Invoke the runnable class SysFlushAos to clear the AOD cache",
        "Params":  [
                       [
                           "Url",
                           "URL to the Dynamics 365 instance you want to clear the AOD cache on",
                           "",
                           false,
                           "false",
                           ""
                       ]
                   ],
        "Alias":  "",
        "Author":  "Mötz Jensen (@Splaxi)",
        "Synopsis":  "Invoke the SysFlushAos class",
        "Name":  "Invoke-D365SysFlushAodCache",
        "Links":  null,
        "Examples":  "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\\u003eInvoke-D365SysFlushAodCache\nThis will a call against the default URL for the machine and\r\nhave it execute the SysFlushAOD class",
        "Syntax":  "Invoke-D365SysFlushAodCache [[-Url] \u003cString\u003e] [\u003cCommonParameters\u003e]"
    },
    {
        "CommandName":  "Invoke-D365SysRunnerClass",
        "Description":  "Makes it possible to call any runnable class directly from the browser, without worrying about the details",
        "Params":  [
                       [
                           "ClassName",
                           "The name of the class you want to execute",
                           "",
                           true,
                           "false",
                           ""
                       ],
                       [
                           "Company",
                           "The company for which you want to execute the class against\nDefault value is: \"DAT\"",
                           "",
                           false,
                           "false",
                           "$Script:Company"
                       ],
                       [
                           "Url",
                           "The URL you want to execute against\nDefault value is the Fully Qualified Domain Name registered on the machine",
                           "",
                           false,
                           "false",
                           "$Script:Url"
                       ]
                   ],
        "Alias":  "",
        "Author":  "Mötz Jensen (@Splaxi)",
        "Synopsis":  "Start a browser session that executes SysRunnerClass",
        "Name":  "Invoke-D365SysRunnerClass",
        "Links":  null,
        "Examples":  "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\\u003eInvoke-D365SysRunnerClass -ClassName SysFlushAOD\nWill execute the SysRunnerClass and have it execute the SysFlushAOD class and will run it against the \"DAT\" (default value) company\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\\u003eInvoke-D365SysRunnerClass -ClassName SysFlushAOD -Company \"USMF\"\nWill execute the SysRunnerClass and have it execute the SysFlushAOD class and will run it against the \"USMF\" company\n-------------------------- EXAMPLE 3 --------------------------\nPS C:\\\u003eInvoke-D365SysRunnerClass -ClassName SysFlushAOD -Url https://Test.cloud.onebox.dynamics.com\nWill execute the SysRunnerClass and have it execute the SysFlushAOD class and will run it against the \"DAT\" company, on the https://Test.cloud.onebox.dynamics.com URL",
        "Syntax":  "Invoke-D365SysRunnerClass [-ClassName] \u003cString\u003e [[-Company] \u003cString\u003e] [[-Url] \u003cString\u003e] [\u003cCommonParameters\u003e]"
    },
    {
        "CommandName":  "Invoke-D365TableBrowser",
        "Description":  "Makes it possible to call the table browser for a given table directly from the web browser, without worrying about the details",
        "Params":  [
                       [
                           "TableName",
                           "The name of the table you want to see the rows for",
                           "",
                           true,
                           "true (ByPropertyName)",
                           ""
                       ],
                       [
                           "Company",
                           "The company for which you want to see the data from in the given table\nDefault value is: \"DAT\"",
                           "",
                           false,
                           "true (ByPropertyName)",
                           "$Script:Company"
                       ],
                       [
                           "Url",
                           "The URL you want to execute against\nDefault value is the Fully Qualified Domain Name registered on the machine",
                           "",
                           false,
                           "true (ByPropertyName)",
                           "$Script:Url"
                       ]
                   ],
        "Alias":  "",
        "Author":  "Mötz Jensen (@Splaxi)",
        "Synopsis":  "Start a browser session that will show the table browser",
        "Name":  "Invoke-D365TableBrowser",
        "Links":  null,
        "Examples":  "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\\u003eInvoke-D365TableBrowser -TableName SalesTable\nWill open the table browser and show all the records in Sales Table from the \"DAT\" company (default value).\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\\u003eInvoke-D365TableBrowser -TableName SalesTable -Company \"USMF\"\nWill open the table browser and show all the records in Sales Table from the \"USMF\" company.",
        "Syntax":  "Invoke-D365TableBrowser [-TableName] \u003cString\u003e [[-Company] \u003cString\u003e] [[-Url] \u003cString\u003e] [\u003cCommonParameters\u003e]"
    },
    {
        "CommandName":  "New-D365Bacpac",
        "Description":  "Takes care of all the details and steps that is needed to create a valid bacpac file to move between Tier 1 (onebox or Azure hosted) and Tier 2 (MS hosted), or vice versa\n\nSupports to create a raw bacpac file without prepping. Can be used to automate backup from Tier 2 (MS hosted) environment",
        "Params":  [
                       [
                           "ExportModeTier1",
                           "Switch to instruct the cmdlet that the export will be done against a classic SQL Server installation",
                           "",
                           true,
                           "false",
                           "False"
                       ],
                       [
                           "ExportModeTier2",
                           "Switch to instruct the cmdlet that the export will be done against an Azure SQL DB instance",
                           "",
                           true,
                           "false",
                           "False"
                       ],
                       [
                           "DatabaseServer",
                           "The name of the database server\nIf on-premises or classic SQL Server, use either short name og Fully Qualified Domain Name (FQDN).\nIf Azure use the full address to the database server, e.g. server.database.windows.net",
                           "",
                           false,
                           "false",
                           "$Script:DatabaseServer"
                       ],
                       [
                           "DatabaseName",
                           "The name of the database",
                           "",
                           false,
                           "false",
                           "$Script:DatabaseName"
                       ],
                       [
                           "SqlUser",
                           "The login name for the SQL Server instance",
                           "",
                           false,
                           "false",
                           "$Script:DatabaseUserName"
                       ],
                       [
                           "SqlPwd",
                           "The password for the SQL Server user.",
                           "",
                           false,
                           "false",
                           "$Script:DatabaseUserPassword"
                       ],
                       [
                           "BackupDirectory",
                           "The path where to store the temporary backup file when the script needs to handle that",
                           "",
                           false,
                           "false",
                           "C:\\Temp\\d365fo.tools\\SqlBackups"
                       ],
                       [
                           "NewDatabaseName",
                           "The name for the database the script is going to create when doing the restore process",
                           "",
                           false,
                           "false",
                           "\"$Script:DatabaseName`_export\""
                       ],
                       [
                           "BacpacFile",
                           "The path where you want the cmdlet to store the bacpac file that will be generated",
                           "File",
                           false,
                           "false",
                           "\"C:\\Temp\\d365fo.tools\\$DatabaseName.bacpac\""
                       ],
                       [
                           "CustomSqlFile",
                           "The path to a custom sql server script file that you want executed against the database",
                           "",
                           false,
                           "false",
                           ""
                       ],
                       [
                           "ExportOnly",
                           "Switch to instruct the cmdlet to either just create a dump bacpac file or run the prepping process first",
                           "",
                           false,
                           "false",
                           "False"
                       ]
                   ],
        "Alias":  "",
        "Author":  "Rasmus Andersen (@ITRasmus)",
        "Synopsis":  "Generate a bacpac file from a database",
        "Name":  "New-D365Bacpac",
        "Links":  null,
        "Examples":  "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\\u003eNew-D365Bacpac -ExportModeTier1 -BackupDirectory c:\\Temp\\backup\\ -NewDatabaseName Testing1 -BacpacFile \"C:\\Temp\\Bacpac\\Testing1.bacpac\"\nWill backup the \"AXDB\" database and restore is as \"Testing1\" again the localhost SQL Server.\r\nWill run the prepping process against the restored database.\r\nWill export a bacpac file to \"C:\\Temp\\Bacpac\\Testing1.bacpac\".\r\nWill delete the restored database.\r\nIt will use trusted connection (Windows authentication) while working against the SQL Server.\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\\u003eNew-D365Bacpac -ExportModeTier2 -DatabaseServer localhost -DatabaseName AxDB -SqlUser User123 -SqlPwd \"Password123\" -NewDatabaseName Testing1 -BacpacFile C:\\Temp\\Bacpac\\Testing1.bacpac\nWill create a copy the db database on the dbserver1 in Azure.\r\nWill run the prepping process against the copy database.\r\nWill export a bacpac file.\r\nWill delete the copy database.\n-------------------------- EXAMPLE 3 --------------------------\nPS C:\\\u003eNew-D365Bacpac -ExportModeTier2 -SqlUser User123 -SqlPwd \"Password123\" -NewDatabaseName Testing1 -BacpacFile C:\\Temp\\Bacpac\\Testing1.bacpac\nNormally used for a Tier-2 export and preparation for Tier-1 import\nWill create a copy of the registered D365 database on the registered D365 Azure SQL DB instance.\r\nWill run the prepping process against the copy database.\r\nWill export a bacpac file.\r\nWill delete the copy database.\n-------------------------- EXAMPLE 4 --------------------------\nPS C:\\\u003eNew-D365Bacpac -ExportModeTier2 -SqlUser User123 -SqlPwd \"Password123\" -NewDatabaseName Testing1 -BacpacFile C:\\Temp\\Bacpac\\Testing1.bacpac -ExportOnly\nWill export a bacpac file.\r\nThe bacpac should be able to restore back into the database without any preparing because it is coming from the environment from the beginning",
        "Syntax":  "New-D365Bacpac [-ExportModeTier2] [[-DatabaseServer] \u003cString\u003e] [[-DatabaseName] \u003cString\u003e] [-SqlUser] \u003cString\u003e [-SqlPwd] \u003cString\u003e [[-NewDatabaseName] \u003cString\u003e] [[-BacpacFile] \u003cString\u003e] [[-CustomSqlFile] \u003cString\u003e] [-ExportOnly] [\u003cCommonParameters\u003e]\nNew-D365Bacpac [-ExportModeTier1] [[-DatabaseServer] \u003cString\u003e] [[-DatabaseName] \u003cString\u003e] [[-SqlUser] \u003cString\u003e] [[-SqlPwd] \u003cString\u003e] [[-BackupDirectory] \u003cString\u003e] [[-NewDatabaseName] \u003cString\u003e] [[-BacpacFile] \u003cString\u003e] [[-CustomSqlFile] \u003cString\u003e] [-ExportOnly] [\u003cCommonParameters\u003e]"
    },
    {
        "CommandName":  "New-D365CAReport",
        "Description":  "A cmdlet that wraps some of the cumbersome work into a streamlined process",
        "Params":  [
                       [
                           "Path",
                           "Full path to CAR file (xlsx-file)",
                           "File",
                           false,
                           "false",
                           "(Join-Path $Script:DefaultTempPath \"CAReport.xlsx\")"
                       ],
                       [
                           "BinDir",
                           "The path to the bin directory for the environment\nDefault path is the same as the AOS service PackagesLocalDirectory\\bin",
                           "",
                           false,
                           "false",
                           "\"$Script:PackageDirectory\\bin\""
                       ],
                       [
                           "MetaDataDir",
                           "The path to the meta data directory for the environment\nDefault path is the same as the aos service PackagesLocalDirectory",
                           "",
                           false,
                           "false",
                           "\"$Script:MetaDataDir\""
                       ],
                       [
                           "Module",
                           "Name of the Module to analyse",
                           "Package",
                           true,
                           "false",
                           ""
                       ],
                       [
                           "Model",
                           "Name of the Model to analyse",
                           "",
                           true,
                           "false",
                           ""
                       ],
                       [
                           "XmlLog",
                           "Path where you want to store the Xml log output generated from the best practice analyser",
                           "",
                           false,
                           "false",
                           "(Join-Path $Script:DefaultTempPath \"BPCheckLogcd.xml\")"
                       ]
                   ],
        "Alias":  "",
        "Author":  "Tommy Skaue (@Skaue)",
        "Synopsis":  "Generate the Customization\u0027s Analysis Report (CAR)",
        "Name":  "New-D365CAReport",
        "Links":  null,
        "Examples":  "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\\u003eNew-D365CAReport -Path \"c:\\temp\\CAReport.xlsx\" -module \"ApplicationSuite\" -model \"MyOverLayerModel\"\nThis will generate a CAR report against MyOverLayerModel in the ApplicationSuite Module, and save the report to \"c:\\temp\\CAReport.xlsx\"",
        "Syntax":  "New-D365CAReport [[-Path] \u003cString\u003e] [[-BinDir] \u003cString\u003e] [[-MetaDataDir] \u003cString\u003e] [-Module] \u003cString\u003e [-Model] \u003cString\u003e [[-XmlLog] \u003cString\u003e] [\u003cCommonParameters\u003e]"
    },
    {
        "CommandName":  "New-D365ISVLicense",
        "Description":  "Create a deployable package with a license file inside",
        "Params":  [
                       [
                           "LicenseFile",
                           "Path to the license file that you want to have inside a deployable package",
                           "",
                           true,
                           "false",
                           ""
                       ],
                       [
                           "Path",
                           "Path to the template zip file for creating a deployable package with a license file\nDefault path is the same as the aos service \"PackagesLocalDirectory\\bin\\CustomDeployablePackage\\ImportISVLicense.zip\"",
                           "Template",
                           false,
                           "false",
                           "\"$Script:BinDirTools\\CustomDeployablePackage\\ImportISVLicense.zip\""
                       ],
                       [
                           "OutputPath",
                           "Path where you want the generated deployable package stored\nDefault value is: \"C:\\temp\\d365fo.tools\\ISVLicense.zip\"",
                           "",
                           false,
                           "false",
                           "C:\\temp\\d365fo.tools\\ISVLicense.zip"
                       ]
                   ],
        "Alias":  "",
        "Author":  "Mötz Jensen (@splaxi)",
        "Synopsis":  "Create a license deployable package",
        "Name":  "New-D365ISVLicense",
        "Links":  null,
        "Examples":  "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\\u003eNew-D365ISVLicense -LicenseFile \"C:\\temp\\ISVLicenseFile.txt\"\nThis will take the \"C:\\temp\\ISVLicenseFile.txt\" file and locate the \"ImportISVLicense.zip\" template file under the \"PackagesLocalDirectory\\bin\\CustomDeployablePackage\\\".\r\nIt will extract the \"ImportISVLicense.zip\", load the ISVLicenseFile.txt and compress (zip) the files into a deployable package.\r\nThe package will be exported to \"C:\\temp\\d365fo.tools\\ISVLicense.zip\"",
        "Syntax":  "New-D365ISVLicense [-LicenseFile] \u003cString\u003e [-Path \u003cString\u003e] [-OutputPath \u003cString\u003e] [\u003cCommonParameters\u003e]"
    },
    {
        "CommandName":  "New-D365TopologyFile",
        "Description":  "Build a new topology file based on a template and update the ServiceModelList",
        "Params":  [
                       [
                           "Path",
                           "Path to the template topology file",
                           "File",
                           true,
                           "false",
                           ""
                       ],
                       [
                           "Services",
                           "The array with all the service names that you want to fill into the topology file",
                           "",
                           true,
                           "false",
                           ""
                       ],
                       [
                           "NewPath",
                           "Path to where you want to save the new file after it has been created",
                           "NewFile",
                           true,
                           "false",
                           ""
                       ]
                   ],
        "Alias":  "",
        "Author":  "Mötz Jensen (@Splaxi)",
        "Synopsis":  "Create a new topology file",
        "Name":  "New-D365TopologyFile",
        "Links":  null,
        "Examples":  "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\\u003eNew-D365TopologyFile -Path C:\\Temp\\DefaultTopologyData.xml -Services \"ALMService\",\"AOSService\",\"BIService\" -NewPath C:\\temp\\CurrentTopology.xml\nThis will read the \"DefaultTopologyData.xml\" file and fill in \"ALMService\",\"AOSService\" and \"BIService\"\r\nas the services in the ServiceModelList tag. The new file is stored at \"C:\\temp\\CurrentTopology.xml\"\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\\u003e$Services = @(Get-D365InstalledService | ForEach-Object {$_.Servicename})\nPS C:\\\u003e New-D365TopologyFile -Path C:\\Temp\\DefaultTopologyData.xml -Services $Services -NewPath C:\\temp\\CurrentTopology.xml\nThis will get all the services already installed on the machine. Afterwards the list is piped\r\nto New-D365TopologyFile where all services are import into the new topology file that is stored at \"C:\\temp\\CurrentTopology.xml\"",
        "Syntax":  "New-D365TopologyFile [-Path] \u003cString\u003e [-Services] \u003cString[]\u003e [-NewPath] \u003cString\u003e [\u003cCommonParameters\u003e]"
    },
    {
        "CommandName":  "Remove-D365Database",
        "Description":  "Removes a Database",
        "Params":  [
                       [
                           "DatabaseServer",
                           "The name of the database server\nIf on-premises or classic SQL Server, use either short name og Fully Qualified Domain Name (FQDN).\nIf Azure use the full address to the database server, e.g. server.database.windows.net",
                           "",
                           false,
                           "false",
                           "$Script:DatabaseServer"
                       ],
                       [
                           "DatabaseName",
                           "The name of the database",
                           "",
                           false,
                           "false",
                           "$Script:DatabaseName"
                       ],
                       [
                           "SqlUser",
                           "The login name for the SQL Server instance",
                           "",
                           false,
                           "false",
                           "$Script:DatabaseUserName"
                       ],
                       [
                           "SqlPwd",
                           "The password for the SQL Server user",
                           "",
                           false,
                           "false",
                           "$Script:DatabaseUserPassword"
                       ]
                   ],
        "Alias":  "",
        "Author":  "Mötz Jensen (@Splaxi)",
        "Synopsis":  "Removes a Database",
        "Name":  "Remove-D365Database",
        "Links":  null,
        "Examples":  "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\\u003eRemove-D365Database -DatabaseName \"ExportClone\"\nThis will remove the \"ExportClone\" from the default SQL Server instance that is registered on the machine.",
        "Syntax":  "Remove-D365Database [[-DatabaseServer] \u003cString\u003e] [[-DatabaseName] \u003cString\u003e] [[-SqlUser] \u003cString\u003e] [[-SqlPwd] \u003cString\u003e] [\u003cCommonParameters\u003e]"
    },
    {
        "CommandName":  "Remove-D365User",
        "Description":  "Deletes the user from the database, including security configuration",
        "Params":  [
                       [
                           "DatabaseServer",
                           "The name of the database server\nIf on-premises or classic SQL Server, use either short name og Fully Qualified Domain Name (FQDN).\nIf Azure use the full address to the database server, e.g. server.database.windows.net",
                           "",
                           false,
                           "false",
                           "$Script:DatabaseServer"
                       ],
                       [
                           "DatabaseName",
                           "The name of the database",
                           "",
                           false,
                           "false",
                           "$Script:DatabaseName"
                       ],
                       [
                           "SqlUser",
                           "The login name for the SQL Server instance",
                           "",
                           false,
                           "false",
                           "$Script:DatabaseUserName"
                       ],
                       [
                           "SqlPwd",
                           "The password for the SQL Server user.",
                           "",
                           false,
                           "false",
                           "$Script:DatabaseUserPassword"
                       ],
                       [
                           "Email",
                           "The search string to select which user(s) should be updated.\nYou have to specific the explicit email address of the user you want to remove\nThe cmdlet will not be able to delete the ADMIN user, this is to prevent you\r\nfrom being locked out of the system.",
                           "",
                           true,
                           "true (ByPropertyName)",
                           ""
                       ]
                   ],
        "Alias":  "",
        "Author":  "Rasmus Andersen (@ITRasmus)",
        "Synopsis":  "Delete an user from the environment",
        "Name":  "Remove-D365User",
        "Links":  null,
        "Examples":  "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\\u003eRemove-D365User -Email \"Claire@contoso.com\"\nThis will move all security and user details from the user with the email address\r\n\"Claire@contoso.com\"\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\\u003eGet-D365User -Email *contoso.com | Remove-D365User\nThis will first get all users from the database that matches the *contoso.com\r\nsearch and pipe their emails to Remove-D365User for it to delete them.",
        "Syntax":  "Remove-D365User [[-DatabaseServer] \u003cString\u003e] [[-DatabaseName] \u003cString\u003e] [[-SqlUser] \u003cString\u003e] [[-SqlPwd] \u003cString\u003e] [-Email] \u003cString\u003e [\u003cCommonParameters\u003e]"
    },
    {
        "CommandName":  "Rename-D365ComputerName",
        "Description":  "When doing development on-prem, there is as need for changing the Computername.\nFunction both changes Computername and SSRS Configuration",
        "Params":  [
                       [
                           "NewName",
                           "The new name for the computer",
                           "",
                           true,
                           "false",
                           ""
                       ],
                       [
                           "SSRSReportDatabase",
                           "Name of the SSRS reporting database",
                           "",
                           false,
                           "false",
                           "DynamicsAxReportServer"
                       ]
                   ],
        "Alias":  "",
        "Author":  "Rasmus Andersen (@ITRasmus)",
        "Synopsis":  "Function for renaming computer.\nRenames Computer and changes the SSRS Configration",
        "Name":  "Rename-D365ComputerName",
        "Links":  null,
        "Examples":  "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\\u003eRename-D365ComputerName -NewName \"Demo-8.1\" -SSRSReportDatabase \"ReportServer\"\nThis will rename the local machine to the \"Demo-8.1\" as the new Windows machine name.\r\nIt will update the registration inside the SQL Server Reporting Services configuration to handle the new name of the machine.",
        "Syntax":  "Rename-D365ComputerName [-NewName] \u003cString\u003e [[-SSRSReportDatabase] \u003cString\u003e] [\u003cCommonParameters\u003e]"
    },
    {
        "CommandName":  "Rename-D365Instance",
        "Description":  "The Rename function, changes the config values used by a D365FO dev box for identifying its name. Standard it is called \u0027usnconeboxax1aos\u0027",
        "Params":  [
                       [
                           "NewName",
                           "The new name wanted for the D365FO instance",
                           "",
                           true,
                           "false",
                           ""
                       ],
                       [
                           "AosServiceWebRootPath",
                           "Path to the webroot folder for the AOS service \u0027Default value : C:\\AOSService\\Webroot",
                           "",
                           false,
                           "false",
                           "$Script:AOSPath"
                       ],
                       [
                           "IISServerApplicationHostConfigFile",
                           "Path to the IISService Application host file, [Where the binding configurations is stored] \u0027Default value : C:\\Windows\\System32\\inetsrv\\Config\\applicationHost.config\u0027",
                           "",
                           false,
                           "false",
                           "$Script:IISHostFile"
                       ],
                       [
                           "HostsFile",
                           "Place of the host file on the current system [Local DNS record] \u0027 Default value C:\\Windows\\System32\\drivers\\etc\\hosts\u0027",
                           "",
                           false,
                           "false",
                           "$Script:Hosts"
                       ],
                       [
                           "BackupExtension",
                           "Backup name for all the files that are changed",
                           "",
                           false,
                           "false",
                           "bak"
                       ],
                       [
                           "MRConfigFile",
                           "Path to the Financial Reporter (Management Reporter) configuration file",
                           "",
                           false,
                           "false",
                           "$Script:MRConfigFile"
                       ]
                   ],
        "Alias":  "",
        "Author":  "Rasmus Andersen (@ITRasmus)",
        "Synopsis":  "Rename as D365FO Demo/Dev box",
        "Name":  "Rename-D365Instance",
        "Links":  null,
        "Examples":  "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\\u003eRename-D365Instance -NewName \"Demo1\"\nThis will rename the D365 for Finance \u0026 Operations instance to \"Demo1\".\r\nThis IIS will be restarted while doing it.",
        "Syntax":  "Rename-D365Instance [-NewName] \u003cString\u003e [[-AosServiceWebRootPath] \u003cString\u003e] [[-IISServerApplicationHostConfigFile] \u003cString\u003e] [[-HostsFile] \u003cString\u003e] [[-BackupExtension] \u003cString\u003e] [[-MRConfigFile] \u003cString\u003e] [\u003cCommonParameters\u003e]"
    },
    {
        "CommandName":  "Set-D365ActiveAzureStorageConfig",
        "Description":  "Updates the current active Azure Storage Account configuration with a new one",
        "Params":  [
                       [
                           "Name",
                           "The name the Azure Storage Account configuration you want to load into the active Azure Storage Account configuration",
                           "",
                           false,
                           "false",
                           ""
                       ],
                       [
                           "ConfigStorageLocation",
                           "Parameter used to instruct where to store the configuration objects\nThe default value is \"User\" and this will store all configuration for the active user\nValid options are:\r\n\"User\"\r\n\"System\"\n\"System\" will store the configuration so all users can access the configuration objects",
                           "",
                           false,
                           "false",
                           "User"
                       ],
                       [
                           "Temporary",
                           "Switch to instruct the cmdlet to only temporarily override the persisted settings in the configuration storage",
                           "",
                           false,
                           "false",
                           "False"
                       ]
                   ],
        "Alias":  "",
        "Author":  "Mötz Jensen (@Splaxi)",
        "Synopsis":  "Set the active Azure Storage Account configuration",
        "Name":  "Set-D365ActiveAzureStorageConfig",
        "Links":  null,
        "Examples":  "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\\u003eSet-D365ActiveAzureStorageConfig -Name \"UAT-Exports\"\nThis will import the \"UAT-Exports\" set from the Azure Storage Account configurations.\r\nIt will update the active Azure Storage Account configuration.\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\\u003eSet-D365ActiveAzureStorageConfig -Name \"UAT-Exports\" -ConfigStorageLocation \"System\"\nThis will import the \"UAT-Exports\" set from the Azure Storage Account configurations.\r\nIt will update the active Azure Storage Account configuration.\r\nThe data will be stored in the system wide configuration storage, which makes it accessible from all users.\n-------------------------- EXAMPLE 3 --------------------------\nPS C:\\\u003eSet-D365ActiveAzureStorageConfig -Name \"UAT-Exports\" -Temporary\nThis will import the \"UAT-Exports\" set from the Azure Storage Account configurations.\r\nIt will update the active Azure Storage Account configuration.\r\nThe update will only last for the rest of this PowerShell console session.",
        "Syntax":  "Set-D365ActiveAzureStorageConfig [[-Name] \u003cString\u003e] [[-ConfigStorageLocation] \u003cString\u003e] [-Temporary] [\u003cCommonParameters\u003e]"
    },
    {
        "CommandName":  "Set-D365ActiveEnvironmentConfig",
        "Description":  "Updates the current active environment configuration with a new one",
        "Params":  [
                       [
                           "Name",
                           "The name the environment configuration you want to load into the active environment configuration",
                           "",
                           false,
                           "false",
                           ""
                       ],
                       [
                           "ConfigStorageLocation",
                           "Parameter used to instruct where to store the configuration objects\nThe default value is \"User\" and this will store all configuration for the active user\nValid options are:\r\n\"User\"\r\n\"System\"\n\"System\" will store the configuration so all users can access the configuration objects",
                           "",
                           false,
                           "false",
                           "User"
                       ],
                       [
                           "Temporary",
                           "Switch to instruct the cmdlet to only temporarily override the persisted settings in the configuration storage",
                           "",
                           false,
                           "false",
                           "False"
                       ]
                   ],
        "Alias":  "",
        "Author":  "Mötz Jensen (@Splaxi)",
        "Synopsis":  "Set the active environment configuration",
        "Name":  "Set-D365ActiveEnvironmentConfig",
        "Links":  null,
        "Examples":  "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\\u003eSet-D365ActiveEnvironmentConfig -Name \"UAT\"\nThis will import the \"UAT-Exports\" set from the Environment configurations.\r\nIt will update the active Environment Configuration.\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\\u003eSet-D365ActiveEnvironmentConfig -Name \"UAT\" -ConfigStorageLocation \"System\"\nThis will import the \"UAT-Exports\" set from the Environment configurations.\r\nIt will update the active Environment Configuration.\r\nThe data will be stored in the system wide configuration storage, which makes it accessible from all users.\n-------------------------- EXAMPLE 3 --------------------------\nPS C:\\\u003eSet-D365ActiveEnvironmentConfig -Name \"UAT\" -Temporary\nThis will import the \"UAT-Exports\" set from the Environment configurations.\r\nIt will update the active Environment Configuration.\r\nThe update will only last for the rest of this PowerShell console session.",
        "Syntax":  "Set-D365ActiveEnvironmentConfig [[-Name] \u003cString\u003e] [[-ConfigStorageLocation] \u003cString\u003e] [-Temporary] [\u003cCommonParameters\u003e]"
    },
    {
        "CommandName":  "Set-D365Admin",
        "Description":  "Cmdlet using the AdminProvisioning tool from D365FO",
        "Params":  [
                       [
                           "AdminSignInName",
                           "Email for the Admin",
                           "Email",
                           true,
                           "false",
                           ""
                       ],
                       [
                           "DatabaseServer",
                           "Alternative SQL Database server, Default is the one provided by the DataAccess object",
                           "",
                           false,
                           "false",
                           "$Script:DatabaseServer"
                       ],
                       [
                           "DatabaseName",
                           "Alternative SQL Database, Default is the one provided by the DataAccess object",
                           "",
                           false,
                           "false",
                           "$Script:DatabaseName"
                       ],
                       [
                           "SqlUser",
                           "Alternative SQL user, Default is the one provided by the DataAccess object",
                           "",
                           false,
                           "false",
                           "$Script:DatabaseUserName"
                       ],
                       [
                           "SqlPwd",
                           "Alternative SQL user password, Default is the one provided by the DataAccess object",
                           "",
                           false,
                           "false",
                           "$Script:DatabaseUserPassword"
                       ]
                   ],
        "Alias":  "",
        "Author":  "Rasmus Andersen (@ITRasmus)",
        "Synopsis":  "Powershell implementation of the AdminProvisioning tool",
        "Name":  "Set-D365Admin",
        "Links":  null,
        "Examples":  "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\\u003eSet-D365Admin \"claire@contoso.com\"\nThis will provision claire@contoso.com as administrator for the environment",
        "Syntax":  "Set-D365Admin [-AdminSignInName] \u003cString\u003e [[-DatabaseServer] \u003cString\u003e] [[-DatabaseName] \u003cString\u003e] [[-SqlUser] \u003cString\u003e] [[-SqlPwd] \u003cString\u003e] [\u003cCommonParameters\u003e]"
    },
    {
        "CommandName":  "Set-D365ClickOnceTrustPrompt",
        "Description":  "Creates the needed registry keys and values for ClickOnce to work on the machine",
        "Params":  [

                   ],
        "Alias":  "",
        "Author":  "Mötz Jensen (@Splaxi)",
        "Synopsis":  "Set the ClickOnce needed configuration",
        "Name":  "Set-D365ClickOnceTrustPrompt",
        "Links":  null,
        "Examples":  "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\\u003eSet-D365ClickOnceTrustPrompt\nThis will create / or update the current ClickOnce configuration.",
        "Syntax":  "Set-D365ClickOnceTrustPrompt [\u003cCommonParameters\u003e]"
    },
    {
        "CommandName":  "Set-D365FavoriteBookmark",
        "Description":  "Enable the favorite bar in internet explorer and put in the URL as a favorite",
        "Params":  [
                       [
                           "URL",
                           "The URL of the shortcut you want to add to the favorite bar",
                           "",
                           false,
                           "true (ByPropertyName)",
                           ""
                       ]
                   ],
        "Alias":  "",
        "Author":  "Mötz Jensen (@Splaxi)",
        "Synopsis":  "Enable the favorite bar and add an URL",
        "Name":  "Set-D365FavoriteBookmark",
        "Links":  null,
        "Examples":  "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\\u003eSet-D365FavoriteBookmark -Url \"https://usnconeboxax1aos.cloud.onebox.dynamics.com\"\nThis will add the \"https://usnconeboxax1aos.cloud.onebox.dynamics.com\" to the favorite bar, enable the favorite bar and lock it.\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\\u003eGet-D365Url | Set-D365FavoriteBookmark\nThis will get the URL from the environment and add that to the favorite bar, enable the favorite bar and lock it.",
        "Syntax":  "Set-D365FavoriteBookmark [[-URL] \u003cString\u003e] [\u003cCommonParameters\u003e]"
    },
    {
        "CommandName":  "Set-D365LogicAppConfig",
        "Description":  "Store the needed details for the module to execute an Azure Logic App using a HTTP request",
        "Params":  [
                       [
                           "Url",
                           "The URL for the http request endpoint of the desired\r\nlogic app",
                           "",
                           true,
                           "false",
                           ""
                       ],
                       [
                           "Email",
                           "The receiving email address that should be notified",
                           "",
                           true,
                           "false",
                           ""
                       ],
                       [
                           "Subject",
                           "The subject of the email that you want to send",
                           "",
                           true,
                           "false",
                           ""
                       ],
                       [
                           "ConfigStorageLocation",
                           "Parameter used to instruct where to store the configuration objects\nThe default value is \"User\" and this will store all configuration for the active user\nValid options are:\r\n\"User\"\r\n\"System\"\n\"System\" will store the configuration so all users can access the configuration objects",
                           "",
                           false,
                           "false",
                           "User"
                       ],
                       [
                           "Temporary",
                           "Switch to instruct the cmdlet to only temporarily override the persisted settings in the configuration storage",
                           "",
                           false,
                           "false",
                           "False"
                       ]
                   ],
        "Alias":  "",
        "Author":  "Mötz Jensen (@Splaxi)",
        "Synopsis":  "Set the details for the logic app invoke cmdlet",
        "Name":  "Set-D365LogicAppConfig",
        "Links":  null,
        "Examples":  "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\\u003eSet-D365LogicAppConfig -Email administrator@contoso.com -Subject \"Work is done\" -Url https://prod-35.westeurope.logic.azure.com:443/\nThis will set all the details about invoking the Logic App.\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\\u003eSet-D365LogicAppConfig -Email administrator@contoso.com -Subject \"Work is done\" -Url https://prod-35.westeurope.logic.azure.com:443/ -ConfigStorageLocation \"System\"\nThis will set all the details about invoking the Logic App.\r\nThe data will be stored in the system wide configuration storage, which makes it accessible from all users.\n-------------------------- EXAMPLE 3 --------------------------\nPS C:\\\u003eSet-D365LogicAppConfig -Email administrator@contoso.com -Subject \"Work is done\" -Url https://prod-35.westeurope.logic.azure.com:443/ -Temporary\nThis will set all the details about invoking the Logic App.\r\nThe update will only last for the rest of this PowerShell console session.",
        "Syntax":  "Set-D365LogicAppConfig [-Url] \u003cString\u003e [-Email] \u003cString\u003e [-Subject] \u003cString\u003e [[-ConfigStorageLocation] \u003cString\u003e] [-Temporary] [\u003cCommonParameters\u003e]"
    },
    {
        "CommandName":  "Set-D365OfflineAuthenticationAdminEmail",
        "Description":  "Sets the registered offline administrator in the \"DynamicsDevConfig.xml\" file located in the default Package Directory",
        "Params":  [
                       [
                           "Email",
                           "The desired email address of the to be offline administrator",
                           "",
                           true,
                           "false",
                           ""
                       ]
                   ],
        "Alias":  "",
        "Author":  "Mötz Jensen (@Splaxi)",
        "Synopsis":  "Sets the offline administrator e-mail",
        "Name":  "Set-D365OfflineAuthenticationAdminEmail",
        "Links":  null,
        "Examples":  "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\\u003eSet-D365OfflineAuthenticationAdminEmail -Email \"admin@contoso.com\"\nWill update the Offline Administrator E-mail address in the DynamicsDevConfig.xml file with \"admin@contoso.com\"",
        "Syntax":  "Set-D365OfflineAuthenticationAdminEmail [-Email] \u003cString\u003e [\u003cCommonParameters\u003e]"
    },
    {
        "CommandName":  "Set-D365SDPCleanUp",
        "Description":  "Sets the configured retention period before updates are deleted",
        "Params":  [
                       [
                           "NumberOfDays",
                           "Number of days that deployable software packages should remain on the server",
                           "",
                           false,
                           "false",
                           "30"
                       ]
                   ],
        "Alias":  "",
        "Author":  "Mötz Jensen (@Splaxi)",
        "Synopsis":  "Set the cleanup retention period",
        "Name":  "Set-D365SDPCleanUp",
        "Links":  null,
        "Examples":  "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\\u003eSet-D365SDPCleanUp -NumberOfDays 10\nThis will set the retention period to 10 days inside the the registry\nThe cmdlet REQUIRES elevated permissions to run, otherwise it will fail",
        "Syntax":  "Set-D365SDPCleanUp [[-NumberOfDays] \u003cInt32\u003e] [\u003cCommonParameters\u003e]"
    },
    {
        "CommandName":  "Set-D365StartPage",
        "Description":  "Function for setting the start page in internet explorer",
        "Params":  [
                       [
                           "Name",
                           "Name of the D365 Instance",
                           "",
                           true,
                           "false",
                           ""
                       ],
                       [
                           "Url",
                           "URL of the D365 for Finance \u0026 Operations instance that you want to have as your start page",
                           "",
                           true,
                           "true (ByPropertyName)",
                           ""
                       ]
                   ],
        "Alias":  "",
        "Author":  "Rasmus Andersen (@ITRasmus)",
        "Synopsis":  "Sets the start page in internet explorer",
        "Name":  "Set-D365StartPage",
        "Links":  null,
        "Examples":  "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\\u003eSet-D365StartPage -Name \u0027Demo1\u0027\nThis will update the start page for the current user to \"https://Demo1.cloud.onebox.dynamics.com\"\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\\u003eSet-D365StartPage -URL \"https://uat.sandbox.operations.dynamics.com\"\nThis will update the start page for the current user to \"https://uat.sandbox.operations.dynamics.com\"",
        "Syntax":  "Set-D365StartPage [-Name] \u003cString\u003e [\u003cCommonParameters\u003e]\nSet-D365StartPage [-Url] \u003cString\u003e [\u003cCommonParameters\u003e]"
    },
    {
        "CommandName":  "Set-D365SysAdmin",
        "Description":  "Set a user to sysadmin inside the SQL Server",
        "Params":  [
                       [
                           "User",
                           "The user that you want to make sysadmin\nMost be well formatted server\\user or domain\\user.\nDefault value is: machinename\\administrator",
                           "",
                           false,
                           "false",
                           "\"$env:computername\\administrator\""
                       ],
                       [
                           "DatabaseServer",
                           "The name of the database server\nIf on-premises or classic SQL Server, use either short name og Fully Qualified Domain Name (FQDN).\nIf Azure use the full address to the database server, e.g. server.database.windows.net",
                           "",
                           false,
                           "false",
                           "$Script:DatabaseServer"
                       ],
                       [
                           "DatabaseName",
                           "The name of the database",
                           "",
                           false,
                           "false",
                           "$Script:DatabaseName"
                       ],
                       [
                           "SqlUser",
                           "The login name for the SQL Server instance",
                           "",
                           false,
                           "false",
                           "$Script:DatabaseUserName"
                       ],
                       [
                           "SqlPwd",
                           "The password for the SQL Server user.",
                           "",
                           false,
                           "false",
                           "$Script:DatabaseUserPassword"
                       ]
                   ],
        "Alias":  "",
        "Author":  "Mötz Jensen (@splaxi)",
        "Synopsis":  "Set a user to sysadmin",
        "Name":  "Set-D365SysAdmin",
        "Links":  null,
        "Examples":  "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\\u003eSet-D365SysAdmin\nThis will configure the local administrator on the machine as a SYSADMIN inside SQL Server\nFor this to run you need to be running it from a elevated console\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\\u003eSet-D365SysAdmin -SqlPwd Test123\nThis will configure the local administrator on the machine as a SYSADMIN inside SQL Server.\r\nIt will logon as the default SqlUser but use the provided SqlPwd.\nThis can be run from a non-elevated console",
        "Syntax":  "Set-D365SysAdmin [[-User] \u003cString\u003e] [[-DatabaseServer] \u003cString\u003e] [[-DatabaseName] \u003cString\u003e] [[-SqlUser] \u003cString\u003e] [[-SqlPwd] \u003cString\u003e] [\u003cCommonParameters\u003e]"
    },
    {
        "CommandName":  "Set-D365WorkstationMode",
        "Description":  "Set the Workstation mode to enabled or not\n\nIt is used to enable the tool to run on a personal machine and still be able to call Invoke-D365TableBrowser and Invoke-D365SysRunnerClass",
        "Params":  [
                       [
                           "Enabled",
                           "$True enables the workstation mode while $false deactivated the workstation mode",
                           "",
                           true,
                           "false",
                           "False"
                       ]
                   ],
        "Alias":  "",
        "Author":  "Mötz Jensen (@Splaxi)",
        "Synopsis":  "Set the Workstation mode",
        "Name":  "Set-D365WorkstationMode",
        "Links":  null,
        "Examples":  "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\\u003eSet-D365WorkstationMode -Enabled $true\nThis will enable the Workstation mode.\r\nYou will have to restart the powershell session when you switch around.",
        "Syntax":  "Set-D365WorkstationMode [-Enabled] \u003cBoolean\u003e [\u003cCommonParameters\u003e]"
    },
    {
        "CommandName":  "Start-D365Environment",
        "Description":  "Can start all relevant services that is running in a D365FO environment",
        "Params":  [
                       [
                           "ComputerName",
                           "An array of computers that you want to start services on.",
                           "",
                           false,
                           "false",
                           "@($env:computername)"
                       ],
                       [
                           "All",
                           "Set when you want to start all relevant services\nIncludes:\r\nAos\r\nBatch\r\nFinancial Reporter",
                           "",
                           false,
                           "false",
                           "[switch]::Present"
                       ],
                       [
                           "Aos",
                           "Start the Aos (iis) service",
                           "",
                           false,
                           "false",
                           "False"
                       ],
                       [
                           "Batch",
                           "Start the batch service",
                           "",
                           false,
                           "false",
                           "False"
                       ],
                       [
                           "FinancialReporter",
                           "Start the financial reporter (Management Reporter 2012) service",
                           "",
                           false,
                           "false",
                           "False"
                       ],
                       [
                           "DMF",
                           "Start the Data Management Framework service",
                           "",
                           false,
                           "false",
                           "False"
                       ]
                   ],
        "Alias":  "",
        "Author":  "Mötz Jensen (@Splaxi)",
        "Synopsis":  "Cmdlet to start the different services in a Dynamics 365 Finance \u0026 Operations environment",
        "Name":  "Start-D365Environment",
        "Links":  null,
        "Examples":  "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\\u003eStart-D365Environment -All\nWill start all D365FO service on the machine\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\\u003eStart-D365Environment -Aos -Batch\nWill start Aos \u0026 Batch services on the machine",
        "Syntax":  "Start-D365Environment [[-ComputerName] \u003cString[]\u003e] [[-All]] [\u003cCommonParameters\u003e]\nStart-D365Environment [[-ComputerName] \u003cString[]\u003e] [[-Aos]] [[-Batch]] [[-FinancialReporter]] [[-DMF]] [\u003cCommonParameters\u003e]"
    },
    {
        "CommandName":  "Stop-D365Environment",
        "Description":  "Can stop all relevant services that is running in a D365FO environment",
        "Params":  [
                       [
                           "ComputerName",
                           "An array of computers that you want to stop services on.",
                           "",
                           false,
                           "false",
                           "@($env:computername)"
                       ],
                       [
                           "All",
                           "Set when you want to stop all relevant services\nIncludes:\r\nAos\r\nBatch\r\nFinancial Reporter",
                           "",
                           false,
                           "false",
                           "[switch]::Present"
                       ],
                       [
                           "Aos",
                           "Stop the Aos (iis) service",
                           "",
                           false,
                           "false",
                           "False"
                       ],
                       [
                           "Batch",
                           "Stop the batch service",
                           "",
                           false,
                           "false",
                           "False"
                       ],
                       [
                           "FinancialReporter",
                           "Start the financial reporter (Management Reporter 2012) service",
                           "",
                           false,
                           "false",
                           "False"
                       ],
                       [
                           "DMF",
                           "Start the Data Management Framework service",
                           "",
                           false,
                           "false",
                           "False"
                       ]
                   ],
        "Alias":  "",
        "Author":  "Mötz Jensen (@Splaxi)",
        "Synopsis":  "Cmdlet to stop the different services in a Dynamics 365 Finance \u0026 Operations environment",
        "Name":  "Stop-D365Environment",
        "Links":  null,
        "Examples":  "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\\u003eStop-D365Environment -All\nWill stop all D365FO service on the machine\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\\u003eStop-D365Environment -Aos -Batch\nWill stop Aos \u0026 Batch services on the machine",
        "Syntax":  "Stop-D365Environment [[-ComputerName] \u003cString[]\u003e] [[-All]] [\u003cCommonParameters\u003e]\nStop-D365Environment [[-ComputerName] \u003cString[]\u003e] [[-Aos]] [[-Batch]] [[-FinancialReporter]] [[-DMF]] [\u003cCommonParameters\u003e]"
    },
    {
        "CommandName":  "Switch-D365ActiveDatabase",
        "Description":  "Switches the 2 databases. The Old wil be renamed _original",
        "Params":  [
                       [
                           "DatabaseServer",
                           "The name of the database server\nIf on-premises or classic SQL Server, use either short name og Fully Qualified Domain Name (FQDN).\nIf Azure use the full address to the database server, e.g. server.database.windows.net",
                           "",
                           false,
                           "false",
                           "$Script:DatabaseServer"
                       ],
                       [
                           "DatabaseName",
                           "The name of the database",
                           "",
                           false,
                           "false",
                           "$Script:DatabaseName"
                       ],
                       [
                           "SqlUser",
                           "The login name for the SQL Server instance",
                           "",
                           false,
                           "false",
                           "$Script:DatabaseUserName"
                       ],
                       [
                           "SqlPwd",
                           "The password for the SQL Server user",
                           "",
                           false,
                           "false",
                           "$Script:DatabaseUserPassword"
                       ],
                       [
                           "NewDatabaseName",
                           "The database that takes the DatabaseName\u0027s place",
                           "",
                           true,
                           "false",
                           ""
                       ]
                   ],
        "Alias":  "",
        "Author":  "Rasmus Andersen (@ITRasmus)",
        "Synopsis":  "Switches the 2 databases. The Old wil be renamed _original",
        "Name":  "Switch-D365ActiveDatabase",
        "Links":  null,
        "Examples":  "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\\u003eSwitch-D365ActiveDatabase -NewDatabaseName \"GoldenConfig\"\nThis will switch the default database AXDB out and put \"GoldenConfig\" in its place instead.",
        "Syntax":  "Switch-D365ActiveDatabase [[-DatabaseServer] \u003cString\u003e] [[-DatabaseName] \u003cString\u003e] [[-SqlUser] \u003cString\u003e] [[-SqlPwd] \u003cString\u003e] [-NewDatabaseName] \u003cString\u003e [\u003cCommonParameters\u003e]"
    },
    {
        "CommandName":  "Update-D365User",
        "Description":  "Is capable of updating all the user details inside the UserInfo table to enable a user to sign in",
        "Params":  [
                       [
                           "DatabaseServer",
                           "The name of the database server\nIf on-premises or classic SQL Server, use either short name og Fully Qualified Domain Name (FQDN).\nIf Azure use the full address to the database server, e.g. server.database.windows.net",
                           "",
                           false,
                           "false",
                           "$Script:DatabaseServer"
                       ],
                       [
                           "DatabaseName",
                           "The name of the database",
                           "",
                           false,
                           "false",
                           "$Script:DatabaseName"
                       ],
                       [
                           "SqlUser",
                           "The login name for the SQL Server instance",
                           "",
                           false,
                           "false",
                           "$Script:DatabaseUserName"
                       ],
                       [
                           "SqlPwd",
                           "The password for the SQL Server user.",
                           "",
                           false,
                           "false",
                           "$Script:DatabaseUserPassword"
                       ],
                       [
                           "Email",
                           "The search string to select which user(s) should be updated.\nThe parameter supports wildcards. E.g. -Email \"*@contoso.com*\"",
                           "",
                           true,
                           "false",
                           ""
                       ],
                       [
                           "Company",
                           "The company the user should start in.",
                           "",
                           false,
                           "false",
                           ""
                       ]
                   ],
        "Alias":  "",
        "Author":  "Rasmus Andersen (@ITRasmus)",
        "Synopsis":  "Updates the user details in the database",
        "Name":  "Update-D365User",
        "Links":  null,
        "Examples":  "-------------------------- EXAMPLE 1 --------------------------\nPS C:\\\u003eUpdate-D365User -Email \"claire@contoso.com\"\nThis will search for the user with the e-mail address claire@contoso.com and update it with needed information based on the tenant owner of the environment\n-------------------------- EXAMPLE 2 --------------------------\nPS C:\\\u003eUpdate-D365User -Email \"*contoso.com\"\nThis will search for all users with an e-mail address containing \u0027contoso.com\u0027 and update them with needed information based on the tenant owner of the environment",
        "Syntax":  "Update-D365User [[-DatabaseServer] \u003cString\u003e] [[-DatabaseName] \u003cString\u003e] [[-SqlUser] \u003cString\u003e] [[-SqlPwd] \u003cString\u003e] [-Email] \u003cString\u003e [[-Company] \u003cString\u003e] [\u003cCommonParameters\u003e]"
    }
]
